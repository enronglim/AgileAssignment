'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="CarWorkshopDB")>  _
Partial Public Class DBDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertCustomer(instance As Customer)
    End Sub
  Partial Private Sub UpdateCustomer(instance As Customer)
    End Sub
  Partial Private Sub DeleteCustomer(instance As Customer)
    End Sub
  Partial Private Sub InsertServiceCoupon(instance As ServiceCoupon)
    End Sub
  Partial Private Sub UpdateServiceCoupon(instance As ServiceCoupon)
    End Sub
  Partial Private Sub DeleteServiceCoupon(instance As ServiceCoupon)
    End Sub
  Partial Private Sub InsertCar(instance As Car)
    End Sub
  Partial Private Sub UpdateCar(instance As Car)
    End Sub
  Partial Private Sub DeleteCar(instance As Car)
    End Sub
  Partial Private Sub InsertBin(instance As Bin)
    End Sub
  Partial Private Sub UpdateBin(instance As Bin)
    End Sub
  Partial Private Sub DeleteBin(instance As Bin)
    End Sub
  Partial Private Sub InsertSupplier(instance As Supplier)
    End Sub
  Partial Private Sub UpdateSupplier(instance As Supplier)
    End Sub
  Partial Private Sub DeleteSupplier(instance As Supplier)
    End Sub
  Partial Private Sub InsertBillingRecord(instance As BillingRecord)
    End Sub
  Partial Private Sub UpdateBillingRecord(instance As BillingRecord)
    End Sub
  Partial Private Sub DeleteBillingRecord(instance As BillingRecord)
    End Sub
  Partial Private Sub InsertUsedItem(instance As UsedItem)
    End Sub
  Partial Private Sub UpdateUsedItem(instance As UsedItem)
    End Sub
  Partial Private Sub DeleteUsedItem(instance As UsedItem)
    End Sub
  Partial Private Sub InsertBill(instance As Bill)
    End Sub
  Partial Private Sub UpdateBill(instance As Bill)
    End Sub
  Partial Private Sub DeleteBill(instance As Bill)
    End Sub
  Partial Private Sub InsertWarrantyClaim(instance As WarrantyClaim)
    End Sub
  Partial Private Sub UpdateWarrantyClaim(instance As WarrantyClaim)
    End Sub
  Partial Private Sub DeleteWarrantyClaim(instance As WarrantyClaim)
    End Sub
  Partial Private Sub InsertAppointment(instance As Appointment)
    End Sub
  Partial Private Sub UpdateAppointment(instance As Appointment)
    End Sub
  Partial Private Sub DeleteAppointment(instance As Appointment)
    End Sub
  Partial Private Sub InsertReview(instance As Review)
    End Sub
  Partial Private Sub UpdateReview(instance As Review)
    End Sub
  Partial Private Sub DeleteReview(instance As Review)
    End Sub
  Partial Private Sub InsertPayment(instance As Payment)
    End Sub
  Partial Private Sub UpdatePayment(instance As Payment)
    End Sub
  Partial Private Sub DeletePayment(instance As Payment)
    End Sub
  Partial Private Sub InsertStaff(instance As Staff)
    End Sub
  Partial Private Sub UpdateStaff(instance As Staff)
    End Sub
  Partial Private Sub DeleteStaff(instance As Staff)
    End Sub
  Partial Private Sub InsertItemStorage(instance As ItemStorage)
    End Sub
  Partial Private Sub UpdateItemStorage(instance As ItemStorage)
    End Sub
  Partial Private Sub DeleteItemStorage(instance As ItemStorage)
    End Sub
  Partial Private Sub InsertOnlineOrder(instance As OnlineOrder)
    End Sub
  Partial Private Sub UpdateOnlineOrder(instance As OnlineOrder)
    End Sub
  Partial Private Sub DeleteOnlineOrder(instance As OnlineOrder)
    End Sub
  Partial Private Sub InsertWorkshop(instance As Workshop)
    End Sub
  Partial Private Sub UpdateWorkshop(instance As Workshop)
    End Sub
  Partial Private Sub DeleteWorkshop(instance As Workshop)
    End Sub
  Partial Private Sub InsertJobSheet(instance As JobSheet)
    End Sub
  Partial Private Sub UpdateJobSheet(instance As JobSheet)
    End Sub
  Partial Private Sub DeleteJobSheet(instance As JobSheet)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.CarWorkshopSystem.My.MySettings.Default.CarWorkshopDBConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Customers() As System.Data.Linq.Table(Of Customer)
		Get
			Return Me.GetTable(Of Customer)
		End Get
	End Property
	
	Public ReadOnly Property ServiceCoupons() As System.Data.Linq.Table(Of ServiceCoupon)
		Get
			Return Me.GetTable(Of ServiceCoupon)
		End Get
	End Property
	
	Public ReadOnly Property Cars() As System.Data.Linq.Table(Of Car)
		Get
			Return Me.GetTable(Of Car)
		End Get
	End Property
	
	Public ReadOnly Property Bins() As System.Data.Linq.Table(Of Bin)
		Get
			Return Me.GetTable(Of Bin)
		End Get
	End Property
	
	Public ReadOnly Property Suppliers() As System.Data.Linq.Table(Of Supplier)
		Get
			Return Me.GetTable(Of Supplier)
		End Get
	End Property
	
	Public ReadOnly Property BillingRecords() As System.Data.Linq.Table(Of BillingRecord)
		Get
			Return Me.GetTable(Of BillingRecord)
		End Get
	End Property
	
	Public ReadOnly Property UsedItems() As System.Data.Linq.Table(Of UsedItem)
		Get
			Return Me.GetTable(Of UsedItem)
		End Get
	End Property
	
	Public ReadOnly Property Bills() As System.Data.Linq.Table(Of Bill)
		Get
			Return Me.GetTable(Of Bill)
		End Get
	End Property
	
	Public ReadOnly Property WarrantyClaims() As System.Data.Linq.Table(Of WarrantyClaim)
		Get
			Return Me.GetTable(Of WarrantyClaim)
		End Get
	End Property
	
	Public ReadOnly Property Appointments() As System.Data.Linq.Table(Of Appointment)
		Get
			Return Me.GetTable(Of Appointment)
		End Get
	End Property
	
	Public ReadOnly Property Reviews() As System.Data.Linq.Table(Of Review)
		Get
			Return Me.GetTable(Of Review)
		End Get
	End Property
	
	Public ReadOnly Property Payments() As System.Data.Linq.Table(Of Payment)
		Get
			Return Me.GetTable(Of Payment)
		End Get
	End Property
	
	Public ReadOnly Property Staffs() As System.Data.Linq.Table(Of Staff)
		Get
			Return Me.GetTable(Of Staff)
		End Get
	End Property
	
	Public ReadOnly Property ItemStorages() As System.Data.Linq.Table(Of ItemStorage)
		Get
			Return Me.GetTable(Of ItemStorage)
		End Get
	End Property
	
	Public ReadOnly Property OnlineOrders() As System.Data.Linq.Table(Of OnlineOrder)
		Get
			Return Me.GetTable(Of OnlineOrder)
		End Get
	End Property
	
	Public ReadOnly Property Workshops() As System.Data.Linq.Table(Of Workshop)
		Get
			Return Me.GetTable(Of Workshop)
		End Get
	End Property
	
	Public ReadOnly Property JobSheets() As System.Data.Linq.Table(Of JobSheet)
		Get
			Return Me.GetTable(Of JobSheet)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Customer")>  _
Partial Public Class Customer
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _name As String
	
	Private _customerIC As String
	
	Private _gender As String
	
	Private _passportNo As String
	
	Private _contactNo As String
	
	Private _address As String
	
	Private _email As String
	
	Private _race As String
	
	Private _status As String
	
	Private _serviceCount As System.Nullable(Of Integer)
	
	Private _Cars As EntitySet(Of Car)
	
	Private _Bills As EntitySet(Of Bill)
	
	Private _Appointments As EntitySet(Of Appointment)
	
	Private _Reviews As EntitySet(Of Review)
	
	Private _OnlineOrders As EntitySet(Of OnlineOrder)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OncustomerICChanging(value As String)
    End Sub
    Partial Private Sub OncustomerICChanged()
    End Sub
    Partial Private Sub OngenderChanging(value As String)
    End Sub
    Partial Private Sub OngenderChanged()
    End Sub
    Partial Private Sub OnpassportNoChanging(value As String)
    End Sub
    Partial Private Sub OnpassportNoChanged()
    End Sub
    Partial Private Sub OncontactNoChanging(value As String)
    End Sub
    Partial Private Sub OncontactNoChanged()
    End Sub
    Partial Private Sub OnaddressChanging(value As String)
    End Sub
    Partial Private Sub OnaddressChanged()
    End Sub
    Partial Private Sub OnemailChanging(value As String)
    End Sub
    Partial Private Sub OnemailChanged()
    End Sub
    Partial Private Sub OnraceChanging(value As String)
    End Sub
    Partial Private Sub OnraceChanged()
    End Sub
    Partial Private Sub OnstatusChanging(value As String)
    End Sub
    Partial Private Sub OnstatusChanged()
    End Sub
    Partial Private Sub OnserviceCountChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnserviceCountChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Cars = New EntitySet(Of Car)(AddressOf Me.attach_Cars, AddressOf Me.detach_Cars)
		Me._Bills = New EntitySet(Of Bill)(AddressOf Me.attach_Bills, AddressOf Me.detach_Bills)
		Me._Appointments = New EntitySet(Of Appointment)(AddressOf Me.attach_Appointments, AddressOf Me.detach_Appointments)
		Me._Reviews = New EntitySet(Of Review)(AddressOf Me.attach_Reviews, AddressOf Me.detach_Reviews)
		Me._OnlineOrders = New EntitySet(Of OnlineOrder)(AddressOf Me.attach_OnlineOrders, AddressOf Me.detach_OnlineOrders)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_customerIC", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property customerIC() As String
		Get
			Return Me._customerIC
		End Get
		Set
			If (String.Equals(Me._customerIC, value) = false) Then
				Me.OncustomerICChanging(value)
				Me.SendPropertyChanging
				Me._customerIC = value
				Me.SendPropertyChanged("customerIC")
				Me.OncustomerICChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gender", DbType:="VarChar(7) NOT NULL", CanBeNull:=false)>  _
	Public Property gender() As String
		Get
			Return Me._gender
		End Get
		Set
			If (String.Equals(Me._gender, value) = false) Then
				Me.OngenderChanging(value)
				Me.SendPropertyChanging
				Me._gender = value
				Me.SendPropertyChanged("gender")
				Me.OngenderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_passportNo", DbType:="VarChar(20)")>  _
	Public Property passportNo() As String
		Get
			Return Me._passportNo
		End Get
		Set
			If (String.Equals(Me._passportNo, value) = false) Then
				Me.OnpassportNoChanging(value)
				Me.SendPropertyChanging
				Me._passportNo = value
				Me.SendPropertyChanged("passportNo")
				Me.OnpassportNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_contactNo", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property contactNo() As String
		Get
			Return Me._contactNo
		End Get
		Set
			If (String.Equals(Me._contactNo, value) = false) Then
				Me.OncontactNoChanging(value)
				Me.SendPropertyChanging
				Me._contactNo = value
				Me.SendPropertyChanged("contactNo")
				Me.OncontactNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_address", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property address() As String
		Get
			Return Me._address
		End Get
		Set
			If (String.Equals(Me._address, value) = false) Then
				Me.OnaddressChanging(value)
				Me.SendPropertyChanging
				Me._address = value
				Me.SendPropertyChanged("address")
				Me.OnaddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_email", DbType:="VarChar(35)")>  _
	Public Property email() As String
		Get
			Return Me._email
		End Get
		Set
			If (String.Equals(Me._email, value) = false) Then
				Me.OnemailChanging(value)
				Me.SendPropertyChanging
				Me._email = value
				Me.SendPropertyChanged("email")
				Me.OnemailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_race", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property race() As String
		Get
			Return Me._race
		End Get
		Set
			If (String.Equals(Me._race, value) = false) Then
				Me.OnraceChanging(value)
				Me.SendPropertyChanging
				Me._race = value
				Me.SendPropertyChanged("race")
				Me.OnraceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property status() As String
		Get
			Return Me._status
		End Get
		Set
			If (String.Equals(Me._status, value) = false) Then
				Me.OnstatusChanging(value)
				Me.SendPropertyChanging
				Me._status = value
				Me.SendPropertyChanged("status")
				Me.OnstatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_serviceCount", DbType:="Int")>  _
	Public Property serviceCount() As System.Nullable(Of Integer)
		Get
			Return Me._serviceCount
		End Get
		Set
			If (Me._serviceCount.Equals(value) = false) Then
				Me.OnserviceCountChanging(value)
				Me.SendPropertyChanging
				Me._serviceCount = value
				Me.SendPropertyChanged("serviceCount")
				Me.OnserviceCountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Customer_Car", Storage:="_Cars", ThisKey:="customerIC", OtherKey:="customerIC")>  _
	Public Property Cars() As EntitySet(Of Car)
		Get
			Return Me._Cars
		End Get
		Set
			Me._Cars.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Customer_Bill", Storage:="_Bills", ThisKey:="customerIC", OtherKey:="customerIC")>  _
	Public Property Bills() As EntitySet(Of Bill)
		Get
			Return Me._Bills
		End Get
		Set
			Me._Bills.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Customer_Appointment", Storage:="_Appointments", ThisKey:="customerIC", OtherKey:="customerIC")>  _
	Public Property Appointments() As EntitySet(Of Appointment)
		Get
			Return Me._Appointments
		End Get
		Set
			Me._Appointments.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Customer_Review", Storage:="_Reviews", ThisKey:="customerIC", OtherKey:="customerIC")>  _
	Public Property Reviews() As EntitySet(Of Review)
		Get
			Return Me._Reviews
		End Get
		Set
			Me._Reviews.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Customer_OnlineOrder", Storage:="_OnlineOrders", ThisKey:="customerIC", OtherKey:="customerIC")>  _
	Public Property OnlineOrders() As EntitySet(Of OnlineOrder)
		Get
			Return Me._OnlineOrders
		End Get
		Set
			Me._OnlineOrders.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Cars(ByVal entity As Car)
		Me.SendPropertyChanging
		entity.Customer = Me
	End Sub
	
	Private Sub detach_Cars(ByVal entity As Car)
		Me.SendPropertyChanging
		entity.Customer = Nothing
	End Sub
	
	Private Sub attach_Bills(ByVal entity As Bill)
		Me.SendPropertyChanging
		entity.Customer = Me
	End Sub
	
	Private Sub detach_Bills(ByVal entity As Bill)
		Me.SendPropertyChanging
		entity.Customer = Nothing
	End Sub
	
	Private Sub attach_Appointments(ByVal entity As Appointment)
		Me.SendPropertyChanging
		entity.Customer = Me
	End Sub
	
	Private Sub detach_Appointments(ByVal entity As Appointment)
		Me.SendPropertyChanging
		entity.Customer = Nothing
	End Sub
	
	Private Sub attach_Reviews(ByVal entity As Review)
		Me.SendPropertyChanging
		entity.Customer = Me
	End Sub
	
	Private Sub detach_Reviews(ByVal entity As Review)
		Me.SendPropertyChanging
		entity.Customer = Nothing
	End Sub
	
	Private Sub attach_OnlineOrders(ByVal entity As OnlineOrder)
		Me.SendPropertyChanging
		entity.Customer = Me
	End Sub
	
	Private Sub detach_OnlineOrders(ByVal entity As OnlineOrder)
		Me.SendPropertyChanging
		entity.Customer = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ServiceCoupon")>  _
Partial Public Class ServiceCoupon
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _serialNo As String
	
	Private _usage As String
	
	Private _status As String
	
	Private _expireDate As Date
	
	Private _Payments As EntitySet(Of Payment)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnserialNoChanging(value As String)
    End Sub
    Partial Private Sub OnserialNoChanged()
    End Sub
    Partial Private Sub OnusageChanging(value As String)
    End Sub
    Partial Private Sub OnusageChanged()
    End Sub
    Partial Private Sub OnstatusChanging(value As String)
    End Sub
    Partial Private Sub OnstatusChanged()
    End Sub
    Partial Private Sub OnexpireDateChanging(value As Date)
    End Sub
    Partial Private Sub OnexpireDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Payments = New EntitySet(Of Payment)(AddressOf Me.attach_Payments, AddressOf Me.detach_Payments)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_serialNo", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property serialNo() As String
		Get
			Return Me._serialNo
		End Get
		Set
			If (String.Equals(Me._serialNo, value) = false) Then
				Me.OnserialNoChanging(value)
				Me.SendPropertyChanging
				Me._serialNo = value
				Me.SendPropertyChanged("serialNo")
				Me.OnserialNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_usage", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property usage() As String
		Get
			Return Me._usage
		End Get
		Set
			If (String.Equals(Me._usage, value) = false) Then
				Me.OnusageChanging(value)
				Me.SendPropertyChanging
				Me._usage = value
				Me.SendPropertyChanged("usage")
				Me.OnusageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property status() As String
		Get
			Return Me._status
		End Get
		Set
			If (String.Equals(Me._status, value) = false) Then
				Me.OnstatusChanging(value)
				Me.SendPropertyChanging
				Me._status = value
				Me.SendPropertyChanged("status")
				Me.OnstatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_expireDate", DbType:="Date NOT NULL")>  _
	Public Property expireDate() As Date
		Get
			Return Me._expireDate
		End Get
		Set
			If ((Me._expireDate = value)  _
						= false) Then
				Me.OnexpireDateChanging(value)
				Me.SendPropertyChanging
				Me._expireDate = value
				Me.SendPropertyChanged("expireDate")
				Me.OnexpireDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ServiceCoupon_Payment", Storage:="_Payments", ThisKey:="serialNo", OtherKey:="serialNo")>  _
	Public Property Payments() As EntitySet(Of Payment)
		Get
			Return Me._Payments
		End Get
		Set
			Me._Payments.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Payments(ByVal entity As Payment)
		Me.SendPropertyChanging
		entity.ServiceCoupon = Me
	End Sub
	
	Private Sub detach_Payments(ByVal entity As Payment)
		Me.SendPropertyChanging
		entity.ServiceCoupon = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Car")>  _
Partial Public Class Car
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _carRegisterNo As String
	
	Private _carModel As String
	
	Private _color As String
	
	Private _customerIC As String
	
	Private _JobSheets As EntitySet(Of JobSheet)
	
	Private _Customer As EntityRef(Of Customer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OncarRegisterNoChanging(value As String)
    End Sub
    Partial Private Sub OncarRegisterNoChanged()
    End Sub
    Partial Private Sub OncarModelChanging(value As String)
    End Sub
    Partial Private Sub OncarModelChanged()
    End Sub
    Partial Private Sub OncolorChanging(value As String)
    End Sub
    Partial Private Sub OncolorChanged()
    End Sub
    Partial Private Sub OncustomerICChanging(value As String)
    End Sub
    Partial Private Sub OncustomerICChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._JobSheets = New EntitySet(Of JobSheet)(AddressOf Me.attach_JobSheets, AddressOf Me.detach_JobSheets)
		Me._Customer = CType(Nothing, EntityRef(Of Customer))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_carRegisterNo", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property carRegisterNo() As String
		Get
			Return Me._carRegisterNo
		End Get
		Set
			If (String.Equals(Me._carRegisterNo, value) = false) Then
				Me.OncarRegisterNoChanging(value)
				Me.SendPropertyChanging
				Me._carRegisterNo = value
				Me.SendPropertyChanged("carRegisterNo")
				Me.OncarRegisterNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_carModel", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property carModel() As String
		Get
			Return Me._carModel
		End Get
		Set
			If (String.Equals(Me._carModel, value) = false) Then
				Me.OncarModelChanging(value)
				Me.SendPropertyChanging
				Me._carModel = value
				Me.SendPropertyChanged("carModel")
				Me.OncarModelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_color", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property color() As String
		Get
			Return Me._color
		End Get
		Set
			If (String.Equals(Me._color, value) = false) Then
				Me.OncolorChanging(value)
				Me.SendPropertyChanging
				Me._color = value
				Me.SendPropertyChanged("color")
				Me.OncolorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_customerIC", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property customerIC() As String
		Get
			Return Me._customerIC
		End Get
		Set
			If (String.Equals(Me._customerIC, value) = false) Then
				If Me._Customer.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OncustomerICChanging(value)
				Me.SendPropertyChanging
				Me._customerIC = value
				Me.SendPropertyChanged("customerIC")
				Me.OncustomerICChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Car_JobSheet", Storage:="_JobSheets", ThisKey:="carRegisterNo", OtherKey:="carRegisterNo")>  _
	Public Property JobSheets() As EntitySet(Of JobSheet)
		Get
			Return Me._JobSheets
		End Get
		Set
			Me._JobSheets.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Customer_Car", Storage:="_Customer", ThisKey:="customerIC", OtherKey:="customerIC", IsForeignKey:=true)>  _
	Public Property Customer() As Customer
		Get
			Return Me._Customer.Entity
		End Get
		Set
			Dim previousValue As Customer = Me._Customer.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Customer.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Customer.Entity = Nothing
					previousValue.Cars.Remove(Me)
				End If
				Me._Customer.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Cars.Add(Me)
					Me._customerIC = value.customerIC
				Else
					Me._customerIC = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Customer")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_JobSheets(ByVal entity As JobSheet)
		Me.SendPropertyChanging
		entity.Car = Me
	End Sub
	
	Private Sub detach_JobSheets(ByVal entity As JobSheet)
		Me.SendPropertyChanging
		entity.Car = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Bin")>  _
Partial Public Class Bin
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _binID As String
	
	Private _dStockID As String
	
	Private _dStockName As String
	
	Private _dStockQuantity As System.Nullable(Of Integer)
	
	Private _dStockBinDate As System.Nullable(Of Date)
	
	Private _dStockStatus As String
	
	Private _binDisposalReason As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnbinIDChanging(value As String)
    End Sub
    Partial Private Sub OnbinIDChanged()
    End Sub
    Partial Private Sub OndStockIDChanging(value As String)
    End Sub
    Partial Private Sub OndStockIDChanged()
    End Sub
    Partial Private Sub OndStockNameChanging(value As String)
    End Sub
    Partial Private Sub OndStockNameChanged()
    End Sub
    Partial Private Sub OndStockQuantityChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OndStockQuantityChanged()
    End Sub
    Partial Private Sub OndStockBinDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndStockBinDateChanged()
    End Sub
    Partial Private Sub OndStockStatusChanging(value As String)
    End Sub
    Partial Private Sub OndStockStatusChanged()
    End Sub
    Partial Private Sub OnbinDisposalReasonChanging(value As String)
    End Sub
    Partial Private Sub OnbinDisposalReasonChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_binID", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property binID() As String
		Get
			Return Me._binID
		End Get
		Set
			If (String.Equals(Me._binID, value) = false) Then
				Me.OnbinIDChanging(value)
				Me.SendPropertyChanging
				Me._binID = value
				Me.SendPropertyChanged("binID")
				Me.OnbinIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dStockID", DbType:="VarChar(20)")>  _
	Public Property dStockID() As String
		Get
			Return Me._dStockID
		End Get
		Set
			If (String.Equals(Me._dStockID, value) = false) Then
				Me.OndStockIDChanging(value)
				Me.SendPropertyChanging
				Me._dStockID = value
				Me.SendPropertyChanged("dStockID")
				Me.OndStockIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dStockName", DbType:="VarChar(40)")>  _
	Public Property dStockName() As String
		Get
			Return Me._dStockName
		End Get
		Set
			If (String.Equals(Me._dStockName, value) = false) Then
				Me.OndStockNameChanging(value)
				Me.SendPropertyChanging
				Me._dStockName = value
				Me.SendPropertyChanged("dStockName")
				Me.OndStockNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dStockQuantity", DbType:="Int")>  _
	Public Property dStockQuantity() As System.Nullable(Of Integer)
		Get
			Return Me._dStockQuantity
		End Get
		Set
			If (Me._dStockQuantity.Equals(value) = false) Then
				Me.OndStockQuantityChanging(value)
				Me.SendPropertyChanging
				Me._dStockQuantity = value
				Me.SendPropertyChanged("dStockQuantity")
				Me.OndStockQuantityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dStockBinDate", DbType:="Date")>  _
	Public Property dStockBinDate() As System.Nullable(Of Date)
		Get
			Return Me._dStockBinDate
		End Get
		Set
			If (Me._dStockBinDate.Equals(value) = false) Then
				Me.OndStockBinDateChanging(value)
				Me.SendPropertyChanging
				Me._dStockBinDate = value
				Me.SendPropertyChanged("dStockBinDate")
				Me.OndStockBinDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dStockStatus", DbType:="VarChar(20)")>  _
	Public Property dStockStatus() As String
		Get
			Return Me._dStockStatus
		End Get
		Set
			If (String.Equals(Me._dStockStatus, value) = false) Then
				Me.OndStockStatusChanging(value)
				Me.SendPropertyChanging
				Me._dStockStatus = value
				Me.SendPropertyChanged("dStockStatus")
				Me.OndStockStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_binDisposalReason", DbType:="VarChar(40)")>  _
	Public Property binDisposalReason() As String
		Get
			Return Me._binDisposalReason
		End Get
		Set
			If (String.Equals(Me._binDisposalReason, value) = false) Then
				Me.OnbinDisposalReasonChanging(value)
				Me.SendPropertyChanging
				Me._binDisposalReason = value
				Me.SendPropertyChanged("binDisposalReason")
				Me.OnbinDisposalReasonChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Supplier")>  _
Partial Public Class Supplier
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _supplierID As String
	
	Private _supplierName As String
	
	Private _supplierContact As String
	
	Private _supplierAddress As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnsupplierIDChanging(value As String)
    End Sub
    Partial Private Sub OnsupplierIDChanged()
    End Sub
    Partial Private Sub OnsupplierNameChanging(value As String)
    End Sub
    Partial Private Sub OnsupplierNameChanged()
    End Sub
    Partial Private Sub OnsupplierContactChanging(value As String)
    End Sub
    Partial Private Sub OnsupplierContactChanged()
    End Sub
    Partial Private Sub OnsupplierAddressChanging(value As String)
    End Sub
    Partial Private Sub OnsupplierAddressChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property supplierID() As String
		Get
			Return Me._supplierID
		End Get
		Set
			If (String.Equals(Me._supplierID, value) = false) Then
				Me.OnsupplierIDChanging(value)
				Me.SendPropertyChanging
				Me._supplierID = value
				Me.SendPropertyChanged("supplierID")
				Me.OnsupplierIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="VarChar(30)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me.OnsupplierNameChanging(value)
				Me.SendPropertyChanging
				Me._supplierName = value
				Me.SendPropertyChanged("supplierName")
				Me.OnsupplierNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierContact", DbType:="VarChar(12)")>  _
	Public Property supplierContact() As String
		Get
			Return Me._supplierContact
		End Get
		Set
			If (String.Equals(Me._supplierContact, value) = false) Then
				Me.OnsupplierContactChanging(value)
				Me.SendPropertyChanging
				Me._supplierContact = value
				Me.SendPropertyChanged("supplierContact")
				Me.OnsupplierContactChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierAddress", DbType:="VarChar(50)")>  _
	Public Property supplierAddress() As String
		Get
			Return Me._supplierAddress
		End Get
		Set
			If (String.Equals(Me._supplierAddress, value) = false) Then
				Me.OnsupplierAddressChanging(value)
				Me.SendPropertyChanging
				Me._supplierAddress = value
				Me.SendPropertyChanged("supplierAddress")
				Me.OnsupplierAddressChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BillingRecord")>  _
Partial Public Class BillingRecord
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _billNo As String
	
	Private _inventoryID As String
	
	Private _quantity As System.Nullable(Of Integer)
	
	Private _billingAmount As System.Nullable(Of Decimal)
	
	Private _warrantyPeriod As String
	
	Private _Bill As EntityRef(Of Bill)
	
	Private _ItemStorage As EntityRef(Of ItemStorage)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnbillNoChanging(value As String)
    End Sub
    Partial Private Sub OnbillNoChanged()
    End Sub
    Partial Private Sub OninventoryIDChanging(value As String)
    End Sub
    Partial Private Sub OninventoryIDChanged()
    End Sub
    Partial Private Sub OnquantityChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnquantityChanged()
    End Sub
    Partial Private Sub OnbillingAmountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnbillingAmountChanged()
    End Sub
    Partial Private Sub OnwarrantyPeriodChanging(value As String)
    End Sub
    Partial Private Sub OnwarrantyPeriodChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Bill = CType(Nothing, EntityRef(Of Bill))
		Me._ItemStorage = CType(Nothing, EntityRef(Of ItemStorage))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_billNo", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property billNo() As String
		Get
			Return Me._billNo
		End Get
		Set
			If (String.Equals(Me._billNo, value) = false) Then
				If Me._Bill.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnbillNoChanging(value)
				Me.SendPropertyChanging
				Me._billNo = value
				Me.SendPropertyChanged("billNo")
				Me.OnbillNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_inventoryID", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property inventoryID() As String
		Get
			Return Me._inventoryID
		End Get
		Set
			If (String.Equals(Me._inventoryID, value) = false) Then
				If Me._ItemStorage.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OninventoryIDChanging(value)
				Me.SendPropertyChanging
				Me._inventoryID = value
				Me.SendPropertyChanged("inventoryID")
				Me.OninventoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quantity", DbType:="Int")>  _
	Public Property quantity() As System.Nullable(Of Integer)
		Get
			Return Me._quantity
		End Get
		Set
			If (Me._quantity.Equals(value) = false) Then
				Me.OnquantityChanging(value)
				Me.SendPropertyChanging
				Me._quantity = value
				Me.SendPropertyChanged("quantity")
				Me.OnquantityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_billingAmount", DbType:="Decimal(18,2)")>  _
	Public Property billingAmount() As System.Nullable(Of Decimal)
		Get
			Return Me._billingAmount
		End Get
		Set
			If (Me._billingAmount.Equals(value) = false) Then
				Me.OnbillingAmountChanging(value)
				Me.SendPropertyChanging
				Me._billingAmount = value
				Me.SendPropertyChanged("billingAmount")
				Me.OnbillingAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_warrantyPeriod", DbType:="VarChar(20)")>  _
	Public Property warrantyPeriod() As String
		Get
			Return Me._warrantyPeriod
		End Get
		Set
			If (String.Equals(Me._warrantyPeriod, value) = false) Then
				Me.OnwarrantyPeriodChanging(value)
				Me.SendPropertyChanging
				Me._warrantyPeriod = value
				Me.SendPropertyChanged("warrantyPeriod")
				Me.OnwarrantyPeriodChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Bill_BillingRecord", Storage:="_Bill", ThisKey:="billNo", OtherKey:="billNo", IsForeignKey:=true)>  _
	Public Property Bill() As Bill
		Get
			Return Me._Bill.Entity
		End Get
		Set
			Dim previousValue As Bill = Me._Bill.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Bill.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Bill.Entity = Nothing
					previousValue.BillingRecords.Remove(Me)
				End If
				Me._Bill.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BillingRecords.Add(Me)
					Me._billNo = value.billNo
				Else
					Me._billNo = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Bill")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ItemStorage_BillingRecord", Storage:="_ItemStorage", ThisKey:="inventoryID", OtherKey:="inventoryID", IsForeignKey:=true)>  _
	Public Property ItemStorage() As ItemStorage
		Get
			Return Me._ItemStorage.Entity
		End Get
		Set
			Dim previousValue As ItemStorage = Me._ItemStorage.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ItemStorage.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ItemStorage.Entity = Nothing
					previousValue.BillingRecords.Remove(Me)
				End If
				Me._ItemStorage.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BillingRecords.Add(Me)
					Me._inventoryID = value.inventoryID
				Else
					Me._inventoryID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ItemStorage")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.UsedItems")>  _
Partial Public Class UsedItem
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _dStockID As String
	
	Private _dStockName As String
	
	Private _dStockQuantity As System.Nullable(Of Integer)
	
	Private _dStockBatchNo As String
	
	Private _dStockCategory As String
	
	Private _dStockArrivalDate As System.Nullable(Of Date)
	
	Private _dStockCondition As String
	
	Private _dStockBrand As String
	
	Private _dStockDescription As String
	
	Private _dStockSpecification As String
	
	Private _dStatus As String
	
	Private _dSupplier As String
	
	Private _dPrice As System.Nullable(Of Decimal)
	
	Private _dType As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OndStockIDChanging(value As String)
    End Sub
    Partial Private Sub OndStockIDChanged()
    End Sub
    Partial Private Sub OndStockNameChanging(value As String)
    End Sub
    Partial Private Sub OndStockNameChanged()
    End Sub
    Partial Private Sub OndStockQuantityChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OndStockQuantityChanged()
    End Sub
    Partial Private Sub OndStockBatchNoChanging(value As String)
    End Sub
    Partial Private Sub OndStockBatchNoChanged()
    End Sub
    Partial Private Sub OndStockCategoryChanging(value As String)
    End Sub
    Partial Private Sub OndStockCategoryChanged()
    End Sub
    Partial Private Sub OndStockArrivalDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndStockArrivalDateChanged()
    End Sub
    Partial Private Sub OndStockConditionChanging(value As String)
    End Sub
    Partial Private Sub OndStockConditionChanged()
    End Sub
    Partial Private Sub OndStockBrandChanging(value As String)
    End Sub
    Partial Private Sub OndStockBrandChanged()
    End Sub
    Partial Private Sub OndStockDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndStockDescriptionChanged()
    End Sub
    Partial Private Sub OndStockSpecificationChanging(value As String)
    End Sub
    Partial Private Sub OndStockSpecificationChanged()
    End Sub
    Partial Private Sub OndStatusChanging(value As String)
    End Sub
    Partial Private Sub OndStatusChanged()
    End Sub
    Partial Private Sub OndSupplierChanging(value As String)
    End Sub
    Partial Private Sub OndSupplierChanged()
    End Sub
    Partial Private Sub OndPriceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OndPriceChanged()
    End Sub
    Partial Private Sub OndTypeChanging(value As String)
    End Sub
    Partial Private Sub OndTypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dStockID", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property dStockID() As String
		Get
			Return Me._dStockID
		End Get
		Set
			If (String.Equals(Me._dStockID, value) = false) Then
				Me.OndStockIDChanging(value)
				Me.SendPropertyChanging
				Me._dStockID = value
				Me.SendPropertyChanged("dStockID")
				Me.OndStockIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dStockName", DbType:="VarChar(40)")>  _
	Public Property dStockName() As String
		Get
			Return Me._dStockName
		End Get
		Set
			If (String.Equals(Me._dStockName, value) = false) Then
				Me.OndStockNameChanging(value)
				Me.SendPropertyChanging
				Me._dStockName = value
				Me.SendPropertyChanged("dStockName")
				Me.OndStockNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dStockQuantity", DbType:="Int")>  _
	Public Property dStockQuantity() As System.Nullable(Of Integer)
		Get
			Return Me._dStockQuantity
		End Get
		Set
			If (Me._dStockQuantity.Equals(value) = false) Then
				Me.OndStockQuantityChanging(value)
				Me.SendPropertyChanging
				Me._dStockQuantity = value
				Me.SendPropertyChanged("dStockQuantity")
				Me.OndStockQuantityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dStockBatchNo", DbType:="VarChar(12)")>  _
	Public Property dStockBatchNo() As String
		Get
			Return Me._dStockBatchNo
		End Get
		Set
			If (String.Equals(Me._dStockBatchNo, value) = false) Then
				Me.OndStockBatchNoChanging(value)
				Me.SendPropertyChanging
				Me._dStockBatchNo = value
				Me.SendPropertyChanged("dStockBatchNo")
				Me.OndStockBatchNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dStockCategory", DbType:="VarChar(20)")>  _
	Public Property dStockCategory() As String
		Get
			Return Me._dStockCategory
		End Get
		Set
			If (String.Equals(Me._dStockCategory, value) = false) Then
				Me.OndStockCategoryChanging(value)
				Me.SendPropertyChanging
				Me._dStockCategory = value
				Me.SendPropertyChanged("dStockCategory")
				Me.OndStockCategoryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dStockArrivalDate", DbType:="Date")>  _
	Public Property dStockArrivalDate() As System.Nullable(Of Date)
		Get
			Return Me._dStockArrivalDate
		End Get
		Set
			If (Me._dStockArrivalDate.Equals(value) = false) Then
				Me.OndStockArrivalDateChanging(value)
				Me.SendPropertyChanging
				Me._dStockArrivalDate = value
				Me.SendPropertyChanged("dStockArrivalDate")
				Me.OndStockArrivalDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dStockCondition", DbType:="VarChar(20)")>  _
	Public Property dStockCondition() As String
		Get
			Return Me._dStockCondition
		End Get
		Set
			If (String.Equals(Me._dStockCondition, value) = false) Then
				Me.OndStockConditionChanging(value)
				Me.SendPropertyChanging
				Me._dStockCondition = value
				Me.SendPropertyChanged("dStockCondition")
				Me.OndStockConditionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dStockBrand", DbType:="VarChar(20)")>  _
	Public Property dStockBrand() As String
		Get
			Return Me._dStockBrand
		End Get
		Set
			If (String.Equals(Me._dStockBrand, value) = false) Then
				Me.OndStockBrandChanging(value)
				Me.SendPropertyChanging
				Me._dStockBrand = value
				Me.SendPropertyChanged("dStockBrand")
				Me.OndStockBrandChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dStockDescription", DbType:="VarChar(40)")>  _
	Public Property dStockDescription() As String
		Get
			Return Me._dStockDescription
		End Get
		Set
			If (String.Equals(Me._dStockDescription, value) = false) Then
				Me.OndStockDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._dStockDescription = value
				Me.SendPropertyChanged("dStockDescription")
				Me.OndStockDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dStockSpecification", DbType:="VarChar(40)")>  _
	Public Property dStockSpecification() As String
		Get
			Return Me._dStockSpecification
		End Get
		Set
			If (String.Equals(Me._dStockSpecification, value) = false) Then
				Me.OndStockSpecificationChanging(value)
				Me.SendPropertyChanging
				Me._dStockSpecification = value
				Me.SendPropertyChanged("dStockSpecification")
				Me.OndStockSpecificationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dStatus", DbType:="VarChar(20)")>  _
	Public Property dStatus() As String
		Get
			Return Me._dStatus
		End Get
		Set
			If (String.Equals(Me._dStatus, value) = false) Then
				Me.OndStatusChanging(value)
				Me.SendPropertyChanging
				Me._dStatus = value
				Me.SendPropertyChanged("dStatus")
				Me.OndStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dSupplier", DbType:="VarChar(30)")>  _
	Public Property dSupplier() As String
		Get
			Return Me._dSupplier
		End Get
		Set
			If (String.Equals(Me._dSupplier, value) = false) Then
				Me.OndSupplierChanging(value)
				Me.SendPropertyChanging
				Me._dSupplier = value
				Me.SendPropertyChanged("dSupplier")
				Me.OndSupplierChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dPrice", DbType:="SmallMoney")>  _
	Public Property dPrice() As System.Nullable(Of Decimal)
		Get
			Return Me._dPrice
		End Get
		Set
			If (Me._dPrice.Equals(value) = false) Then
				Me.OndPriceChanging(value)
				Me.SendPropertyChanging
				Me._dPrice = value
				Me.SendPropertyChanged("dPrice")
				Me.OndPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dType", DbType:="VarChar(15)")>  _
	Public Property dType() As String
		Get
			Return Me._dType
		End Get
		Set
			If (String.Equals(Me._dType, value) = false) Then
				Me.OndTypeChanging(value)
				Me.SendPropertyChanging
				Me._dType = value
				Me.SendPropertyChanged("dType")
				Me.OndTypeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Bill")>  _
Partial Public Class Bill
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _billNo As String
	
	Private _billDate As System.Nullable(Of Date)
	
	Private _totalAmount As System.Nullable(Of Decimal)
	
	Private _status As String
	
	Private _customerIC As String
	
	Private _BillingRecords As EntitySet(Of BillingRecord)
	
	Private _Payments As EntitySet(Of Payment)
	
	Private _OnlineOrders As EntitySet(Of OnlineOrder)
	
	Private _JobSheets As EntitySet(Of JobSheet)
	
	Private _Customer As EntityRef(Of Customer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnbillNoChanging(value As String)
    End Sub
    Partial Private Sub OnbillNoChanged()
    End Sub
    Partial Private Sub OnbillDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnbillDateChanged()
    End Sub
    Partial Private Sub OntotalAmountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OntotalAmountChanged()
    End Sub
    Partial Private Sub OnstatusChanging(value As String)
    End Sub
    Partial Private Sub OnstatusChanged()
    End Sub
    Partial Private Sub OncustomerICChanging(value As String)
    End Sub
    Partial Private Sub OncustomerICChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._BillingRecords = New EntitySet(Of BillingRecord)(AddressOf Me.attach_BillingRecords, AddressOf Me.detach_BillingRecords)
		Me._Payments = New EntitySet(Of Payment)(AddressOf Me.attach_Payments, AddressOf Me.detach_Payments)
		Me._OnlineOrders = New EntitySet(Of OnlineOrder)(AddressOf Me.attach_OnlineOrders, AddressOf Me.detach_OnlineOrders)
		Me._JobSheets = New EntitySet(Of JobSheet)(AddressOf Me.attach_JobSheets, AddressOf Me.detach_JobSheets)
		Me._Customer = CType(Nothing, EntityRef(Of Customer))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_billNo", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property billNo() As String
		Get
			Return Me._billNo
		End Get
		Set
			If (String.Equals(Me._billNo, value) = false) Then
				Me.OnbillNoChanging(value)
				Me.SendPropertyChanging
				Me._billNo = value
				Me.SendPropertyChanged("billNo")
				Me.OnbillNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_billDate", DbType:="Date")>  _
	Public Property billDate() As System.Nullable(Of Date)
		Get
			Return Me._billDate
		End Get
		Set
			If (Me._billDate.Equals(value) = false) Then
				Me.OnbillDateChanging(value)
				Me.SendPropertyChanging
				Me._billDate = value
				Me.SendPropertyChanged("billDate")
				Me.OnbillDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_totalAmount", DbType:="Decimal(18,2)")>  _
	Public Property totalAmount() As System.Nullable(Of Decimal)
		Get
			Return Me._totalAmount
		End Get
		Set
			If (Me._totalAmount.Equals(value) = false) Then
				Me.OntotalAmountChanging(value)
				Me.SendPropertyChanging
				Me._totalAmount = value
				Me.SendPropertyChanged("totalAmount")
				Me.OntotalAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="VarChar(20)")>  _
	Public Property status() As String
		Get
			Return Me._status
		End Get
		Set
			If (String.Equals(Me._status, value) = false) Then
				Me.OnstatusChanging(value)
				Me.SendPropertyChanging
				Me._status = value
				Me.SendPropertyChanged("status")
				Me.OnstatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_customerIC", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property customerIC() As String
		Get
			Return Me._customerIC
		End Get
		Set
			If (String.Equals(Me._customerIC, value) = false) Then
				If Me._Customer.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OncustomerICChanging(value)
				Me.SendPropertyChanging
				Me._customerIC = value
				Me.SendPropertyChanged("customerIC")
				Me.OncustomerICChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Bill_BillingRecord", Storage:="_BillingRecords", ThisKey:="billNo", OtherKey:="billNo")>  _
	Public Property BillingRecords() As EntitySet(Of BillingRecord)
		Get
			Return Me._BillingRecords
		End Get
		Set
			Me._BillingRecords.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Bill_Payment", Storage:="_Payments", ThisKey:="billNo", OtherKey:="billNo")>  _
	Public Property Payments() As EntitySet(Of Payment)
		Get
			Return Me._Payments
		End Get
		Set
			Me._Payments.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Bill_OnlineOrder", Storage:="_OnlineOrders", ThisKey:="billNo", OtherKey:="billNo")>  _
	Public Property OnlineOrders() As EntitySet(Of OnlineOrder)
		Get
			Return Me._OnlineOrders
		End Get
		Set
			Me._OnlineOrders.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Bill_JobSheet", Storage:="_JobSheets", ThisKey:="billNo", OtherKey:="billNo")>  _
	Public Property JobSheets() As EntitySet(Of JobSheet)
		Get
			Return Me._JobSheets
		End Get
		Set
			Me._JobSheets.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Customer_Bill", Storage:="_Customer", ThisKey:="customerIC", OtherKey:="customerIC", IsForeignKey:=true)>  _
	Public Property Customer() As Customer
		Get
			Return Me._Customer.Entity
		End Get
		Set
			Dim previousValue As Customer = Me._Customer.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Customer.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Customer.Entity = Nothing
					previousValue.Bills.Remove(Me)
				End If
				Me._Customer.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Bills.Add(Me)
					Me._customerIC = value.customerIC
				Else
					Me._customerIC = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Customer")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_BillingRecords(ByVal entity As BillingRecord)
		Me.SendPropertyChanging
		entity.Bill = Me
	End Sub
	
	Private Sub detach_BillingRecords(ByVal entity As BillingRecord)
		Me.SendPropertyChanging
		entity.Bill = Nothing
	End Sub
	
	Private Sub attach_Payments(ByVal entity As Payment)
		Me.SendPropertyChanging
		entity.Bill = Me
	End Sub
	
	Private Sub detach_Payments(ByVal entity As Payment)
		Me.SendPropertyChanging
		entity.Bill = Nothing
	End Sub
	
	Private Sub attach_OnlineOrders(ByVal entity As OnlineOrder)
		Me.SendPropertyChanging
		entity.Bill = Me
	End Sub
	
	Private Sub detach_OnlineOrders(ByVal entity As OnlineOrder)
		Me.SendPropertyChanging
		entity.Bill = Nothing
	End Sub
	
	Private Sub attach_JobSheets(ByVal entity As JobSheet)
		Me.SendPropertyChanging
		entity.Bill = Me
	End Sub
	
	Private Sub detach_JobSheets(ByVal entity As JobSheet)
		Me.SendPropertyChanging
		entity.Bill = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.WarrantyClaim")>  _
Partial Public Class WarrantyClaim
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _warrantyClaimID As String
	
	Private _warrantyClaimDate As Date
	
	Private _warrantyClaimTime As System.TimeSpan
	
	Private _status As String
	
	Private _reason As String
	
	Private _quantity As Integer
	
	Private _paymentID As String
	
	Private _inventoryID As String
	
	Private _Payment As EntityRef(Of Payment)
	
	Private _ItemStorage As EntityRef(Of ItemStorage)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnwarrantyClaimIDChanging(value As String)
    End Sub
    Partial Private Sub OnwarrantyClaimIDChanged()
    End Sub
    Partial Private Sub OnwarrantyClaimDateChanging(value As Date)
    End Sub
    Partial Private Sub OnwarrantyClaimDateChanged()
    End Sub
    Partial Private Sub OnwarrantyClaimTimeChanging(value As System.TimeSpan)
    End Sub
    Partial Private Sub OnwarrantyClaimTimeChanged()
    End Sub
    Partial Private Sub OnstatusChanging(value As String)
    End Sub
    Partial Private Sub OnstatusChanged()
    End Sub
    Partial Private Sub OnreasonChanging(value As String)
    End Sub
    Partial Private Sub OnreasonChanged()
    End Sub
    Partial Private Sub OnquantityChanging(value As Integer)
    End Sub
    Partial Private Sub OnquantityChanged()
    End Sub
    Partial Private Sub OnpaymentIDChanging(value As String)
    End Sub
    Partial Private Sub OnpaymentIDChanged()
    End Sub
    Partial Private Sub OninventoryIDChanging(value As String)
    End Sub
    Partial Private Sub OninventoryIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Payment = CType(Nothing, EntityRef(Of Payment))
		Me._ItemStorage = CType(Nothing, EntityRef(Of ItemStorage))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_warrantyClaimID", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property warrantyClaimID() As String
		Get
			Return Me._warrantyClaimID
		End Get
		Set
			If (String.Equals(Me._warrantyClaimID, value) = false) Then
				Me.OnwarrantyClaimIDChanging(value)
				Me.SendPropertyChanging
				Me._warrantyClaimID = value
				Me.SendPropertyChanged("warrantyClaimID")
				Me.OnwarrantyClaimIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_warrantyClaimDate", DbType:="Date NOT NULL")>  _
	Public Property warrantyClaimDate() As Date
		Get
			Return Me._warrantyClaimDate
		End Get
		Set
			If ((Me._warrantyClaimDate = value)  _
						= false) Then
				Me.OnwarrantyClaimDateChanging(value)
				Me.SendPropertyChanging
				Me._warrantyClaimDate = value
				Me.SendPropertyChanged("warrantyClaimDate")
				Me.OnwarrantyClaimDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_warrantyClaimTime", DbType:="Time NOT NULL")>  _
	Public Property warrantyClaimTime() As System.TimeSpan
		Get
			Return Me._warrantyClaimTime
		End Get
		Set
			If ((Me._warrantyClaimTime = value)  _
						= false) Then
				Me.OnwarrantyClaimTimeChanging(value)
				Me.SendPropertyChanging
				Me._warrantyClaimTime = value
				Me.SendPropertyChanged("warrantyClaimTime")
				Me.OnwarrantyClaimTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property status() As String
		Get
			Return Me._status
		End Get
		Set
			If (String.Equals(Me._status, value) = false) Then
				Me.OnstatusChanging(value)
				Me.SendPropertyChanging
				Me._status = value
				Me.SendPropertyChanged("status")
				Me.OnstatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_reason", DbType:="VarChar(50)")>  _
	Public Property reason() As String
		Get
			Return Me._reason
		End Get
		Set
			If (String.Equals(Me._reason, value) = false) Then
				Me.OnreasonChanging(value)
				Me.SendPropertyChanging
				Me._reason = value
				Me.SendPropertyChanged("reason")
				Me.OnreasonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quantity", DbType:="Int NOT NULL")>  _
	Public Property quantity() As Integer
		Get
			Return Me._quantity
		End Get
		Set
			If ((Me._quantity = value)  _
						= false) Then
				Me.OnquantityChanging(value)
				Me.SendPropertyChanging
				Me._quantity = value
				Me.SendPropertyChanged("quantity")
				Me.OnquantityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentID", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property paymentID() As String
		Get
			Return Me._paymentID
		End Get
		Set
			If (String.Equals(Me._paymentID, value) = false) Then
				If Me._Payment.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnpaymentIDChanging(value)
				Me.SendPropertyChanging
				Me._paymentID = value
				Me.SendPropertyChanged("paymentID")
				Me.OnpaymentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_inventoryID", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property inventoryID() As String
		Get
			Return Me._inventoryID
		End Get
		Set
			If (String.Equals(Me._inventoryID, value) = false) Then
				If Me._ItemStorage.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OninventoryIDChanging(value)
				Me.SendPropertyChanging
				Me._inventoryID = value
				Me.SendPropertyChanged("inventoryID")
				Me.OninventoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Payment_WarrantyClaim", Storage:="_Payment", ThisKey:="paymentID", OtherKey:="paymentID", IsForeignKey:=true)>  _
	Public Property Payment() As Payment
		Get
			Return Me._Payment.Entity
		End Get
		Set
			Dim previousValue As Payment = Me._Payment.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Payment.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Payment.Entity = Nothing
					previousValue.WarrantyClaims.Remove(Me)
				End If
				Me._Payment.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.WarrantyClaims.Add(Me)
					Me._paymentID = value.paymentID
				Else
					Me._paymentID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Payment")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ItemStorage_WarrantyClaim", Storage:="_ItemStorage", ThisKey:="inventoryID", OtherKey:="inventoryID", IsForeignKey:=true)>  _
	Public Property ItemStorage() As ItemStorage
		Get
			Return Me._ItemStorage.Entity
		End Get
		Set
			Dim previousValue As ItemStorage = Me._ItemStorage.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ItemStorage.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ItemStorage.Entity = Nothing
					previousValue.WarrantyClaims.Remove(Me)
				End If
				Me._ItemStorage.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.WarrantyClaims.Add(Me)
					Me._inventoryID = value.inventoryID
				Else
					Me._inventoryID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ItemStorage")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Appointment")>  _
Partial Public Class Appointment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _appointmentID As String
	
	Private _appointmentDate As Date
	
	Private _appointmentTime As System.TimeSpan
	
	Private _problem As String
	
	Private _appointmentStatus As String
	
	Private _customerIC As String
	
	Private _staffIC As String
	
	Private _Customer As EntityRef(Of Customer)
	
	Private _Staff As EntityRef(Of Staff)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnappointmentIDChanging(value As String)
    End Sub
    Partial Private Sub OnappointmentIDChanged()
    End Sub
    Partial Private Sub OnappointmentDateChanging(value As Date)
    End Sub
    Partial Private Sub OnappointmentDateChanged()
    End Sub
    Partial Private Sub OnappointmentTimeChanging(value As System.TimeSpan)
    End Sub
    Partial Private Sub OnappointmentTimeChanged()
    End Sub
    Partial Private Sub OnproblemChanging(value As String)
    End Sub
    Partial Private Sub OnproblemChanged()
    End Sub
    Partial Private Sub OnappointmentStatusChanging(value As String)
    End Sub
    Partial Private Sub OnappointmentStatusChanged()
    End Sub
    Partial Private Sub OncustomerICChanging(value As String)
    End Sub
    Partial Private Sub OncustomerICChanged()
    End Sub
    Partial Private Sub OnstaffICChanging(value As String)
    End Sub
    Partial Private Sub OnstaffICChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Customer = CType(Nothing, EntityRef(Of Customer))
		Me._Staff = CType(Nothing, EntityRef(Of Staff))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_appointmentID", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property appointmentID() As String
		Get
			Return Me._appointmentID
		End Get
		Set
			If (String.Equals(Me._appointmentID, value) = false) Then
				Me.OnappointmentIDChanging(value)
				Me.SendPropertyChanging
				Me._appointmentID = value
				Me.SendPropertyChanged("appointmentID")
				Me.OnappointmentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_appointmentDate", DbType:="Date NOT NULL")>  _
	Public Property appointmentDate() As Date
		Get
			Return Me._appointmentDate
		End Get
		Set
			If ((Me._appointmentDate = value)  _
						= false) Then
				Me.OnappointmentDateChanging(value)
				Me.SendPropertyChanging
				Me._appointmentDate = value
				Me.SendPropertyChanged("appointmentDate")
				Me.OnappointmentDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_appointmentTime", DbType:="Time NOT NULL")>  _
	Public Property appointmentTime() As System.TimeSpan
		Get
			Return Me._appointmentTime
		End Get
		Set
			If ((Me._appointmentTime = value)  _
						= false) Then
				Me.OnappointmentTimeChanging(value)
				Me.SendPropertyChanging
				Me._appointmentTime = value
				Me.SendPropertyChanged("appointmentTime")
				Me.OnappointmentTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_problem", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property problem() As String
		Get
			Return Me._problem
		End Get
		Set
			If (String.Equals(Me._problem, value) = false) Then
				Me.OnproblemChanging(value)
				Me.SendPropertyChanging
				Me._problem = value
				Me.SendPropertyChanged("problem")
				Me.OnproblemChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_appointmentStatus", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property appointmentStatus() As String
		Get
			Return Me._appointmentStatus
		End Get
		Set
			If (String.Equals(Me._appointmentStatus, value) = false) Then
				Me.OnappointmentStatusChanging(value)
				Me.SendPropertyChanging
				Me._appointmentStatus = value
				Me.SendPropertyChanged("appointmentStatus")
				Me.OnappointmentStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_customerIC", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property customerIC() As String
		Get
			Return Me._customerIC
		End Get
		Set
			If (String.Equals(Me._customerIC, value) = false) Then
				If Me._Customer.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OncustomerICChanging(value)
				Me.SendPropertyChanging
				Me._customerIC = value
				Me.SendPropertyChanged("customerIC")
				Me.OncustomerICChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_staffIC", DbType:="VarChar(20)")>  _
	Public Property staffIC() As String
		Get
			Return Me._staffIC
		End Get
		Set
			If (String.Equals(Me._staffIC, value) = false) Then
				If Me._Staff.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnstaffICChanging(value)
				Me.SendPropertyChanging
				Me._staffIC = value
				Me.SendPropertyChanged("staffIC")
				Me.OnstaffICChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Customer_Appointment", Storage:="_Customer", ThisKey:="customerIC", OtherKey:="customerIC", IsForeignKey:=true)>  _
	Public Property Customer() As Customer
		Get
			Return Me._Customer.Entity
		End Get
		Set
			Dim previousValue As Customer = Me._Customer.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Customer.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Customer.Entity = Nothing
					previousValue.Appointments.Remove(Me)
				End If
				Me._Customer.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Appointments.Add(Me)
					Me._customerIC = value.customerIC
				Else
					Me._customerIC = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Customer")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Staff_Appointment", Storage:="_Staff", ThisKey:="staffIC", OtherKey:="staffIC", IsForeignKey:=true)>  _
	Public Property Staff() As Staff
		Get
			Return Me._Staff.Entity
		End Get
		Set
			Dim previousValue As Staff = Me._Staff.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Staff.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Staff.Entity = Nothing
					previousValue.Appointments.Remove(Me)
				End If
				Me._Staff.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Appointments.Add(Me)
					Me._staffIC = value.staffIC
				Else
					Me._staffIC = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Staff")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Review")>  _
Partial Public Class Review
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _reviewID As Integer
	
	Private _customerIC As String
	
	Private _customerName As String
	
	Private _workshopBranch As String
	
	Private _serviceRating As System.Nullable(Of Integer)
	
	Private _customerComment As String
	
	Private _reviewDate As System.Nullable(Of Date)
	
	Private _serviceType As String
	
	Private _Customer As EntityRef(Of Customer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnreviewIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnreviewIDChanged()
    End Sub
    Partial Private Sub OncustomerICChanging(value As String)
    End Sub
    Partial Private Sub OncustomerICChanged()
    End Sub
    Partial Private Sub OncustomerNameChanging(value As String)
    End Sub
    Partial Private Sub OncustomerNameChanged()
    End Sub
    Partial Private Sub OnworkshopBranchChanging(value As String)
    End Sub
    Partial Private Sub OnworkshopBranchChanged()
    End Sub
    Partial Private Sub OnserviceRatingChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnserviceRatingChanged()
    End Sub
    Partial Private Sub OncustomerCommentChanging(value As String)
    End Sub
    Partial Private Sub OncustomerCommentChanged()
    End Sub
    Partial Private Sub OnreviewDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnreviewDateChanged()
    End Sub
    Partial Private Sub OnserviceTypeChanging(value As String)
    End Sub
    Partial Private Sub OnserviceTypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Customer = CType(Nothing, EntityRef(Of Customer))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_reviewID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property reviewID() As Integer
		Get
			Return Me._reviewID
		End Get
		Set
			If ((Me._reviewID = value)  _
						= false) Then
				Me.OnreviewIDChanging(value)
				Me.SendPropertyChanging
				Me._reviewID = value
				Me.SendPropertyChanged("reviewID")
				Me.OnreviewIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_customerIC", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property customerIC() As String
		Get
			Return Me._customerIC
		End Get
		Set
			If (String.Equals(Me._customerIC, value) = false) Then
				If Me._Customer.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OncustomerICChanging(value)
				Me.SendPropertyChanging
				Me._customerIC = value
				Me.SendPropertyChanged("customerIC")
				Me.OncustomerICChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_customerName", DbType:="VarChar(30)")>  _
	Public Property customerName() As String
		Get
			Return Me._customerName
		End Get
		Set
			If (String.Equals(Me._customerName, value) = false) Then
				Me.OncustomerNameChanging(value)
				Me.SendPropertyChanging
				Me._customerName = value
				Me.SendPropertyChanged("customerName")
				Me.OncustomerNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_workshopBranch", DbType:="VarChar(30)")>  _
	Public Property workshopBranch() As String
		Get
			Return Me._workshopBranch
		End Get
		Set
			If (String.Equals(Me._workshopBranch, value) = false) Then
				Me.OnworkshopBranchChanging(value)
				Me.SendPropertyChanging
				Me._workshopBranch = value
				Me.SendPropertyChanged("workshopBranch")
				Me.OnworkshopBranchChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_serviceRating", DbType:="Int")>  _
	Public Property serviceRating() As System.Nullable(Of Integer)
		Get
			Return Me._serviceRating
		End Get
		Set
			If (Me._serviceRating.Equals(value) = false) Then
				Me.OnserviceRatingChanging(value)
				Me.SendPropertyChanging
				Me._serviceRating = value
				Me.SendPropertyChanged("serviceRating")
				Me.OnserviceRatingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_customerComment", DbType:="VarChar(200)")>  _
	Public Property customerComment() As String
		Get
			Return Me._customerComment
		End Get
		Set
			If (String.Equals(Me._customerComment, value) = false) Then
				Me.OncustomerCommentChanging(value)
				Me.SendPropertyChanging
				Me._customerComment = value
				Me.SendPropertyChanged("customerComment")
				Me.OncustomerCommentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_reviewDate", DbType:="Date")>  _
	Public Property reviewDate() As System.Nullable(Of Date)
		Get
			Return Me._reviewDate
		End Get
		Set
			If (Me._reviewDate.Equals(value) = false) Then
				Me.OnreviewDateChanging(value)
				Me.SendPropertyChanging
				Me._reviewDate = value
				Me.SendPropertyChanged("reviewDate")
				Me.OnreviewDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_serviceType", DbType:="VarChar(30)")>  _
	Public Property serviceType() As String
		Get
			Return Me._serviceType
		End Get
		Set
			If (String.Equals(Me._serviceType, value) = false) Then
				Me.OnserviceTypeChanging(value)
				Me.SendPropertyChanging
				Me._serviceType = value
				Me.SendPropertyChanged("serviceType")
				Me.OnserviceTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Customer_Review", Storage:="_Customer", ThisKey:="customerIC", OtherKey:="customerIC", IsForeignKey:=true)>  _
	Public Property Customer() As Customer
		Get
			Return Me._Customer.Entity
		End Get
		Set
			Dim previousValue As Customer = Me._Customer.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Customer.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Customer.Entity = Nothing
					previousValue.Reviews.Remove(Me)
				End If
				Me._Customer.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Reviews.Add(Me)
					Me._customerIC = value.customerIC
				Else
					Me._customerIC = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Customer")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Payment")>  _
Partial Public Class Payment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _paymentID As String
	
	Private _discount As System.Nullable(Of Decimal)
	
	Private _paymentAmount As Decimal
	
	Private _paymentChange As Decimal
	
	Private _paymentDate As Date
	
	Private _paymentTime As System.TimeSpan
	
	Private _paymentMethod As String
	
	Private _creditNo As String
	
	Private _billNo As String
	
	Private _serialNo As String
	
	Private _WarrantyClaims As EntitySet(Of WarrantyClaim)
	
	Private _Bill As EntityRef(Of Bill)
	
	Private _ServiceCoupon As EntityRef(Of ServiceCoupon)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnpaymentIDChanging(value As String)
    End Sub
    Partial Private Sub OnpaymentIDChanged()
    End Sub
    Partial Private Sub OndiscountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OndiscountChanged()
    End Sub
    Partial Private Sub OnpaymentAmountChanging(value As Decimal)
    End Sub
    Partial Private Sub OnpaymentAmountChanged()
    End Sub
    Partial Private Sub OnpaymentChangeChanging(value As Decimal)
    End Sub
    Partial Private Sub OnpaymentChangeChanged()
    End Sub
    Partial Private Sub OnpaymentDateChanging(value As Date)
    End Sub
    Partial Private Sub OnpaymentDateChanged()
    End Sub
    Partial Private Sub OnpaymentTimeChanging(value As System.TimeSpan)
    End Sub
    Partial Private Sub OnpaymentTimeChanged()
    End Sub
    Partial Private Sub OnpaymentMethodChanging(value As String)
    End Sub
    Partial Private Sub OnpaymentMethodChanged()
    End Sub
    Partial Private Sub OncreditNoChanging(value As String)
    End Sub
    Partial Private Sub OncreditNoChanged()
    End Sub
    Partial Private Sub OnbillNoChanging(value As String)
    End Sub
    Partial Private Sub OnbillNoChanged()
    End Sub
    Partial Private Sub OnserialNoChanging(value As String)
    End Sub
    Partial Private Sub OnserialNoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._WarrantyClaims = New EntitySet(Of WarrantyClaim)(AddressOf Me.attach_WarrantyClaims, AddressOf Me.detach_WarrantyClaims)
		Me._Bill = CType(Nothing, EntityRef(Of Bill))
		Me._ServiceCoupon = CType(Nothing, EntityRef(Of ServiceCoupon))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentID", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property paymentID() As String
		Get
			Return Me._paymentID
		End Get
		Set
			If (String.Equals(Me._paymentID, value) = false) Then
				Me.OnpaymentIDChanging(value)
				Me.SendPropertyChanging
				Me._paymentID = value
				Me.SendPropertyChanged("paymentID")
				Me.OnpaymentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_discount", DbType:="Decimal(18,2)")>  _
	Public Property discount() As System.Nullable(Of Decimal)
		Get
			Return Me._discount
		End Get
		Set
			If (Me._discount.Equals(value) = false) Then
				Me.OndiscountChanging(value)
				Me.SendPropertyChanging
				Me._discount = value
				Me.SendPropertyChanged("discount")
				Me.OndiscountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentAmount", DbType:="Decimal(18,2) NOT NULL")>  _
	Public Property paymentAmount() As Decimal
		Get
			Return Me._paymentAmount
		End Get
		Set
			If ((Me._paymentAmount = value)  _
						= false) Then
				Me.OnpaymentAmountChanging(value)
				Me.SendPropertyChanging
				Me._paymentAmount = value
				Me.SendPropertyChanged("paymentAmount")
				Me.OnpaymentAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentChange", DbType:="Decimal(18,2) NOT NULL")>  _
	Public Property paymentChange() As Decimal
		Get
			Return Me._paymentChange
		End Get
		Set
			If ((Me._paymentChange = value)  _
						= false) Then
				Me.OnpaymentChangeChanging(value)
				Me.SendPropertyChanging
				Me._paymentChange = value
				Me.SendPropertyChanged("paymentChange")
				Me.OnpaymentChangeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentDate", DbType:="Date NOT NULL")>  _
	Public Property paymentDate() As Date
		Get
			Return Me._paymentDate
		End Get
		Set
			If ((Me._paymentDate = value)  _
						= false) Then
				Me.OnpaymentDateChanging(value)
				Me.SendPropertyChanging
				Me._paymentDate = value
				Me.SendPropertyChanged("paymentDate")
				Me.OnpaymentDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentTime", DbType:="Time NOT NULL")>  _
	Public Property paymentTime() As System.TimeSpan
		Get
			Return Me._paymentTime
		End Get
		Set
			If ((Me._paymentTime = value)  _
						= false) Then
				Me.OnpaymentTimeChanging(value)
				Me.SendPropertyChanging
				Me._paymentTime = value
				Me.SendPropertyChanged("paymentTime")
				Me.OnpaymentTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentMethod", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property paymentMethod() As String
		Get
			Return Me._paymentMethod
		End Get
		Set
			If (String.Equals(Me._paymentMethod, value) = false) Then
				Me.OnpaymentMethodChanging(value)
				Me.SendPropertyChanging
				Me._paymentMethod = value
				Me.SendPropertyChanged("paymentMethod")
				Me.OnpaymentMethodChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_creditNo", DbType:="VarChar(20)")>  _
	Public Property creditNo() As String
		Get
			Return Me._creditNo
		End Get
		Set
			If (String.Equals(Me._creditNo, value) = false) Then
				Me.OncreditNoChanging(value)
				Me.SendPropertyChanging
				Me._creditNo = value
				Me.SendPropertyChanged("creditNo")
				Me.OncreditNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_billNo", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property billNo() As String
		Get
			Return Me._billNo
		End Get
		Set
			If (String.Equals(Me._billNo, value) = false) Then
				If Me._Bill.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnbillNoChanging(value)
				Me.SendPropertyChanging
				Me._billNo = value
				Me.SendPropertyChanged("billNo")
				Me.OnbillNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_serialNo", DbType:="VarChar(20)")>  _
	Public Property serialNo() As String
		Get
			Return Me._serialNo
		End Get
		Set
			If (String.Equals(Me._serialNo, value) = false) Then
				If Me._ServiceCoupon.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnserialNoChanging(value)
				Me.SendPropertyChanging
				Me._serialNo = value
				Me.SendPropertyChanged("serialNo")
				Me.OnserialNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Payment_WarrantyClaim", Storage:="_WarrantyClaims", ThisKey:="paymentID", OtherKey:="paymentID")>  _
	Public Property WarrantyClaims() As EntitySet(Of WarrantyClaim)
		Get
			Return Me._WarrantyClaims
		End Get
		Set
			Me._WarrantyClaims.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Bill_Payment", Storage:="_Bill", ThisKey:="billNo", OtherKey:="billNo", IsForeignKey:=true)>  _
	Public Property Bill() As Bill
		Get
			Return Me._Bill.Entity
		End Get
		Set
			Dim previousValue As Bill = Me._Bill.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Bill.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Bill.Entity = Nothing
					previousValue.Payments.Remove(Me)
				End If
				Me._Bill.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Payments.Add(Me)
					Me._billNo = value.billNo
				Else
					Me._billNo = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Bill")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ServiceCoupon_Payment", Storage:="_ServiceCoupon", ThisKey:="serialNo", OtherKey:="serialNo", IsForeignKey:=true)>  _
	Public Property ServiceCoupon() As ServiceCoupon
		Get
			Return Me._ServiceCoupon.Entity
		End Get
		Set
			Dim previousValue As ServiceCoupon = Me._ServiceCoupon.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ServiceCoupon.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ServiceCoupon.Entity = Nothing
					previousValue.Payments.Remove(Me)
				End If
				Me._ServiceCoupon.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Payments.Add(Me)
					Me._serialNo = value.serialNo
				Else
					Me._serialNo = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ServiceCoupon")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_WarrantyClaims(ByVal entity As WarrantyClaim)
		Me.SendPropertyChanging
		entity.Payment = Me
	End Sub
	
	Private Sub detach_WarrantyClaims(ByVal entity As WarrantyClaim)
		Me.SendPropertyChanging
		entity.Payment = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Staff")>  _
Partial Public Class Staff
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _name As String
	
	Private _staffIC As String
	
	Private _position As String
	
	Private _gender As String
	
	Private _contactNo As String
	
	Private _password As String
	
	Private _status As String
	
	Private _address As String
	
	Private _email As String
	
	Private _race As String
	
	Private _emplomentDate As Date
	
	Private _staffPic As System.Data.Linq.Binary
	
	Private _Appointments As EntitySet(Of Appointment)
	
	Private _JobSheets As EntitySet(Of JobSheet)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OnstaffICChanging(value As String)
    End Sub
    Partial Private Sub OnstaffICChanged()
    End Sub
    Partial Private Sub OnpositionChanging(value As String)
    End Sub
    Partial Private Sub OnpositionChanged()
    End Sub
    Partial Private Sub OngenderChanging(value As String)
    End Sub
    Partial Private Sub OngenderChanged()
    End Sub
    Partial Private Sub OncontactNoChanging(value As String)
    End Sub
    Partial Private Sub OncontactNoChanged()
    End Sub
    Partial Private Sub OnpasswordChanging(value As String)
    End Sub
    Partial Private Sub OnpasswordChanged()
    End Sub
    Partial Private Sub OnstatusChanging(value As String)
    End Sub
    Partial Private Sub OnstatusChanged()
    End Sub
    Partial Private Sub OnaddressChanging(value As String)
    End Sub
    Partial Private Sub OnaddressChanged()
    End Sub
    Partial Private Sub OnemailChanging(value As String)
    End Sub
    Partial Private Sub OnemailChanged()
    End Sub
    Partial Private Sub OnraceChanging(value As String)
    End Sub
    Partial Private Sub OnraceChanged()
    End Sub
    Partial Private Sub OnemplomentDateChanging(value As Date)
    End Sub
    Partial Private Sub OnemplomentDateChanged()
    End Sub
    Partial Private Sub OnstaffPicChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnstaffPicChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Appointments = New EntitySet(Of Appointment)(AddressOf Me.attach_Appointments, AddressOf Me.detach_Appointments)
		Me._JobSheets = New EntitySet(Of JobSheet)(AddressOf Me.attach_JobSheets, AddressOf Me.detach_JobSheets)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_staffIC", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property staffIC() As String
		Get
			Return Me._staffIC
		End Get
		Set
			If (String.Equals(Me._staffIC, value) = false) Then
				Me.OnstaffICChanging(value)
				Me.SendPropertyChanging
				Me._staffIC = value
				Me.SendPropertyChanged("staffIC")
				Me.OnstaffICChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_position", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property position() As String
		Get
			Return Me._position
		End Get
		Set
			If (String.Equals(Me._position, value) = false) Then
				Me.OnpositionChanging(value)
				Me.SendPropertyChanging
				Me._position = value
				Me.SendPropertyChanged("position")
				Me.OnpositionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gender", DbType:="VarChar(7) NOT NULL", CanBeNull:=false)>  _
	Public Property gender() As String
		Get
			Return Me._gender
		End Get
		Set
			If (String.Equals(Me._gender, value) = false) Then
				Me.OngenderChanging(value)
				Me.SendPropertyChanging
				Me._gender = value
				Me.SendPropertyChanged("gender")
				Me.OngenderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_contactNo", DbType:="VarChar(20)")>  _
	Public Property contactNo() As String
		Get
			Return Me._contactNo
		End Get
		Set
			If (String.Equals(Me._contactNo, value) = false) Then
				Me.OncontactNoChanging(value)
				Me.SendPropertyChanging
				Me._contactNo = value
				Me.SendPropertyChanged("contactNo")
				Me.OncontactNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_password", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property password() As String
		Get
			Return Me._password
		End Get
		Set
			If (String.Equals(Me._password, value) = false) Then
				Me.OnpasswordChanging(value)
				Me.SendPropertyChanging
				Me._password = value
				Me.SendPropertyChanged("password")
				Me.OnpasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property status() As String
		Get
			Return Me._status
		End Get
		Set
			If (String.Equals(Me._status, value) = false) Then
				Me.OnstatusChanging(value)
				Me.SendPropertyChanging
				Me._status = value
				Me.SendPropertyChanged("status")
				Me.OnstatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_address", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property address() As String
		Get
			Return Me._address
		End Get
		Set
			If (String.Equals(Me._address, value) = false) Then
				Me.OnaddressChanging(value)
				Me.SendPropertyChanging
				Me._address = value
				Me.SendPropertyChanged("address")
				Me.OnaddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_email", DbType:="VarChar(35)")>  _
	Public Property email() As String
		Get
			Return Me._email
		End Get
		Set
			If (String.Equals(Me._email, value) = false) Then
				Me.OnemailChanging(value)
				Me.SendPropertyChanging
				Me._email = value
				Me.SendPropertyChanged("email")
				Me.OnemailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_race", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property race() As String
		Get
			Return Me._race
		End Get
		Set
			If (String.Equals(Me._race, value) = false) Then
				Me.OnraceChanging(value)
				Me.SendPropertyChanging
				Me._race = value
				Me.SendPropertyChanged("race")
				Me.OnraceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_emplomentDate", DbType:="Date NOT NULL")>  _
	Public Property emplomentDate() As Date
		Get
			Return Me._emplomentDate
		End Get
		Set
			If ((Me._emplomentDate = value)  _
						= false) Then
				Me.OnemplomentDateChanging(value)
				Me.SendPropertyChanging
				Me._emplomentDate = value
				Me.SendPropertyChanged("emplomentDate")
				Me.OnemplomentDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_staffPic", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property staffPic() As System.Data.Linq.Binary
		Get
			Return Me._staffPic
		End Get
		Set
			If (Object.Equals(Me._staffPic, value) = false) Then
				Me.OnstaffPicChanging(value)
				Me.SendPropertyChanging
				Me._staffPic = value
				Me.SendPropertyChanged("staffPic")
				Me.OnstaffPicChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Staff_Appointment", Storage:="_Appointments", ThisKey:="staffIC", OtherKey:="staffIC")>  _
	Public Property Appointments() As EntitySet(Of Appointment)
		Get
			Return Me._Appointments
		End Get
		Set
			Me._Appointments.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Staff_JobSheet", Storage:="_JobSheets", ThisKey:="staffIC", OtherKey:="staffIC")>  _
	Public Property JobSheets() As EntitySet(Of JobSheet)
		Get
			Return Me._JobSheets
		End Get
		Set
			Me._JobSheets.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Appointments(ByVal entity As Appointment)
		Me.SendPropertyChanging
		entity.Staff = Me
	End Sub
	
	Private Sub detach_Appointments(ByVal entity As Appointment)
		Me.SendPropertyChanging
		entity.Staff = Nothing
	End Sub
	
	Private Sub attach_JobSheets(ByVal entity As JobSheet)
		Me.SendPropertyChanging
		entity.Staff = Me
	End Sub
	
	Private Sub detach_JobSheets(ByVal entity As JobSheet)
		Me.SendPropertyChanging
		entity.Staff = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ItemStorage")>  _
Partial Public Class ItemStorage
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _inventoryID As String
	
	Private _stockName As String
	
	Private _stockQuantity As System.Nullable(Of Integer)
	
	Private _stockBatchNo As String
	
	Private _stockCategory As String
	
	Private _stockArrivalDate As System.Nullable(Of Date)
	
	Private _stockCondition As String
	
	Private _stockBrand As String
	
	Private _stockDescription As String
	
	Private _stockSpecification As String
	
	Private _stockStatus As String
	
	Private _stockType As String
	
	Private _stockSupplier As String
	
	Private _stockPrice As System.Nullable(Of Decimal)
	
	Private _stockImage As String
	
	Private _stockPath As String
	
	Private _BillingRecords As EntitySet(Of BillingRecord)
	
	Private _WarrantyClaims As EntitySet(Of WarrantyClaim)
	
	Private _OnlineOrders As EntitySet(Of OnlineOrder)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OninventoryIDChanging(value As String)
    End Sub
    Partial Private Sub OninventoryIDChanged()
    End Sub
    Partial Private Sub OnstockNameChanging(value As String)
    End Sub
    Partial Private Sub OnstockNameChanged()
    End Sub
    Partial Private Sub OnstockQuantityChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnstockQuantityChanged()
    End Sub
    Partial Private Sub OnstockBatchNoChanging(value As String)
    End Sub
    Partial Private Sub OnstockBatchNoChanged()
    End Sub
    Partial Private Sub OnstockCategoryChanging(value As String)
    End Sub
    Partial Private Sub OnstockCategoryChanged()
    End Sub
    Partial Private Sub OnstockArrivalDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnstockArrivalDateChanged()
    End Sub
    Partial Private Sub OnstockConditionChanging(value As String)
    End Sub
    Partial Private Sub OnstockConditionChanged()
    End Sub
    Partial Private Sub OnstockBrandChanging(value As String)
    End Sub
    Partial Private Sub OnstockBrandChanged()
    End Sub
    Partial Private Sub OnstockDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnstockDescriptionChanged()
    End Sub
    Partial Private Sub OnstockSpecificationChanging(value As String)
    End Sub
    Partial Private Sub OnstockSpecificationChanged()
    End Sub
    Partial Private Sub OnstockStatusChanging(value As String)
    End Sub
    Partial Private Sub OnstockStatusChanged()
    End Sub
    Partial Private Sub OnstockTypeChanging(value As String)
    End Sub
    Partial Private Sub OnstockTypeChanged()
    End Sub
    Partial Private Sub OnstockSupplierChanging(value As String)
    End Sub
    Partial Private Sub OnstockSupplierChanged()
    End Sub
    Partial Private Sub OnstockPriceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnstockPriceChanged()
    End Sub
    Partial Private Sub OnstockImageChanging(value As String)
    End Sub
    Partial Private Sub OnstockImageChanged()
    End Sub
    Partial Private Sub OnstockPathChanging(value As String)
    End Sub
    Partial Private Sub OnstockPathChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._BillingRecords = New EntitySet(Of BillingRecord)(AddressOf Me.attach_BillingRecords, AddressOf Me.detach_BillingRecords)
		Me._WarrantyClaims = New EntitySet(Of WarrantyClaim)(AddressOf Me.attach_WarrantyClaims, AddressOf Me.detach_WarrantyClaims)
		Me._OnlineOrders = New EntitySet(Of OnlineOrder)(AddressOf Me.attach_OnlineOrders, AddressOf Me.detach_OnlineOrders)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_inventoryID", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property inventoryID() As String
		Get
			Return Me._inventoryID
		End Get
		Set
			If (String.Equals(Me._inventoryID, value) = false) Then
				Me.OninventoryIDChanging(value)
				Me.SendPropertyChanging
				Me._inventoryID = value
				Me.SendPropertyChanged("inventoryID")
				Me.OninventoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_stockName", DbType:="VarChar(40)")>  _
	Public Property stockName() As String
		Get
			Return Me._stockName
		End Get
		Set
			If (String.Equals(Me._stockName, value) = false) Then
				Me.OnstockNameChanging(value)
				Me.SendPropertyChanging
				Me._stockName = value
				Me.SendPropertyChanged("stockName")
				Me.OnstockNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_stockQuantity", DbType:="Int")>  _
	Public Property stockQuantity() As System.Nullable(Of Integer)
		Get
			Return Me._stockQuantity
		End Get
		Set
			If (Me._stockQuantity.Equals(value) = false) Then
				Me.OnstockQuantityChanging(value)
				Me.SendPropertyChanging
				Me._stockQuantity = value
				Me.SendPropertyChanged("stockQuantity")
				Me.OnstockQuantityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_stockBatchNo", DbType:="VarChar(12)")>  _
	Public Property stockBatchNo() As String
		Get
			Return Me._stockBatchNo
		End Get
		Set
			If (String.Equals(Me._stockBatchNo, value) = false) Then
				Me.OnstockBatchNoChanging(value)
				Me.SendPropertyChanging
				Me._stockBatchNo = value
				Me.SendPropertyChanged("stockBatchNo")
				Me.OnstockBatchNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_stockCategory", DbType:="VarChar(20)")>  _
	Public Property stockCategory() As String
		Get
			Return Me._stockCategory
		End Get
		Set
			If (String.Equals(Me._stockCategory, value) = false) Then
				Me.OnstockCategoryChanging(value)
				Me.SendPropertyChanging
				Me._stockCategory = value
				Me.SendPropertyChanged("stockCategory")
				Me.OnstockCategoryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_stockArrivalDate", DbType:="Date")>  _
	Public Property stockArrivalDate() As System.Nullable(Of Date)
		Get
			Return Me._stockArrivalDate
		End Get
		Set
			If (Me._stockArrivalDate.Equals(value) = false) Then
				Me.OnstockArrivalDateChanging(value)
				Me.SendPropertyChanging
				Me._stockArrivalDate = value
				Me.SendPropertyChanged("stockArrivalDate")
				Me.OnstockArrivalDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_stockCondition", DbType:="VarChar(20)")>  _
	Public Property stockCondition() As String
		Get
			Return Me._stockCondition
		End Get
		Set
			If (String.Equals(Me._stockCondition, value) = false) Then
				Me.OnstockConditionChanging(value)
				Me.SendPropertyChanging
				Me._stockCondition = value
				Me.SendPropertyChanged("stockCondition")
				Me.OnstockConditionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_stockBrand", DbType:="VarChar(20)")>  _
	Public Property stockBrand() As String
		Get
			Return Me._stockBrand
		End Get
		Set
			If (String.Equals(Me._stockBrand, value) = false) Then
				Me.OnstockBrandChanging(value)
				Me.SendPropertyChanging
				Me._stockBrand = value
				Me.SendPropertyChanged("stockBrand")
				Me.OnstockBrandChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_stockDescription", DbType:="VarChar(40)")>  _
	Public Property stockDescription() As String
		Get
			Return Me._stockDescription
		End Get
		Set
			If (String.Equals(Me._stockDescription, value) = false) Then
				Me.OnstockDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._stockDescription = value
				Me.SendPropertyChanged("stockDescription")
				Me.OnstockDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_stockSpecification", DbType:="VarChar(40)")>  _
	Public Property stockSpecification() As String
		Get
			Return Me._stockSpecification
		End Get
		Set
			If (String.Equals(Me._stockSpecification, value) = false) Then
				Me.OnstockSpecificationChanging(value)
				Me.SendPropertyChanging
				Me._stockSpecification = value
				Me.SendPropertyChanged("stockSpecification")
				Me.OnstockSpecificationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_stockStatus", DbType:="VarChar(20)")>  _
	Public Property stockStatus() As String
		Get
			Return Me._stockStatus
		End Get
		Set
			If (String.Equals(Me._stockStatus, value) = false) Then
				Me.OnstockStatusChanging(value)
				Me.SendPropertyChanging
				Me._stockStatus = value
				Me.SendPropertyChanged("stockStatus")
				Me.OnstockStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_stockType", DbType:="VarChar(20)")>  _
	Public Property stockType() As String
		Get
			Return Me._stockType
		End Get
		Set
			If (String.Equals(Me._stockType, value) = false) Then
				Me.OnstockTypeChanging(value)
				Me.SendPropertyChanging
				Me._stockType = value
				Me.SendPropertyChanged("stockType")
				Me.OnstockTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_stockSupplier", DbType:="VarChar(30)")>  _
	Public Property stockSupplier() As String
		Get
			Return Me._stockSupplier
		End Get
		Set
			If (String.Equals(Me._stockSupplier, value) = false) Then
				Me.OnstockSupplierChanging(value)
				Me.SendPropertyChanging
				Me._stockSupplier = value
				Me.SendPropertyChanged("stockSupplier")
				Me.OnstockSupplierChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_stockPrice", DbType:="SmallMoney")>  _
	Public Property stockPrice() As System.Nullable(Of Decimal)
		Get
			Return Me._stockPrice
		End Get
		Set
			If (Me._stockPrice.Equals(value) = false) Then
				Me.OnstockPriceChanging(value)
				Me.SendPropertyChanging
				Me._stockPrice = value
				Me.SendPropertyChanged("stockPrice")
				Me.OnstockPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_stockImage", DbType:="VarChar(MAX)")>  _
	Public Property stockImage() As String
		Get
			Return Me._stockImage
		End Get
		Set
			If (String.Equals(Me._stockImage, value) = false) Then
				Me.OnstockImageChanging(value)
				Me.SendPropertyChanging
				Me._stockImage = value
				Me.SendPropertyChanged("stockImage")
				Me.OnstockImageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_stockPath", DbType:="VarChar(150)")>  _
	Public Property stockPath() As String
		Get
			Return Me._stockPath
		End Get
		Set
			If (String.Equals(Me._stockPath, value) = false) Then
				Me.OnstockPathChanging(value)
				Me.SendPropertyChanging
				Me._stockPath = value
				Me.SendPropertyChanged("stockPath")
				Me.OnstockPathChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ItemStorage_BillingRecord", Storage:="_BillingRecords", ThisKey:="inventoryID", OtherKey:="inventoryID")>  _
	Public Property BillingRecords() As EntitySet(Of BillingRecord)
		Get
			Return Me._BillingRecords
		End Get
		Set
			Me._BillingRecords.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ItemStorage_WarrantyClaim", Storage:="_WarrantyClaims", ThisKey:="inventoryID", OtherKey:="inventoryID")>  _
	Public Property WarrantyClaims() As EntitySet(Of WarrantyClaim)
		Get
			Return Me._WarrantyClaims
		End Get
		Set
			Me._WarrantyClaims.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ItemStorage_OnlineOrder", Storage:="_OnlineOrders", ThisKey:="inventoryID", OtherKey:="inventoryID")>  _
	Public Property OnlineOrders() As EntitySet(Of OnlineOrder)
		Get
			Return Me._OnlineOrders
		End Get
		Set
			Me._OnlineOrders.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_BillingRecords(ByVal entity As BillingRecord)
		Me.SendPropertyChanging
		entity.ItemStorage = Me
	End Sub
	
	Private Sub detach_BillingRecords(ByVal entity As BillingRecord)
		Me.SendPropertyChanging
		entity.ItemStorage = Nothing
	End Sub
	
	Private Sub attach_WarrantyClaims(ByVal entity As WarrantyClaim)
		Me.SendPropertyChanging
		entity.ItemStorage = Me
	End Sub
	
	Private Sub detach_WarrantyClaims(ByVal entity As WarrantyClaim)
		Me.SendPropertyChanging
		entity.ItemStorage = Nothing
	End Sub
	
	Private Sub attach_OnlineOrders(ByVal entity As OnlineOrder)
		Me.SendPropertyChanging
		entity.ItemStorage = Me
	End Sub
	
	Private Sub detach_OnlineOrders(ByVal entity As OnlineOrder)
		Me.SendPropertyChanging
		entity.ItemStorage = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.OnlineOrder")>  _
Partial Public Class OnlineOrder
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _orderID As Integer
	
	Private _customerName As String
	
	Private _customerPhoneNo As String
	
	Private _customerIC As String
	
	Private _billNo As String
	
	Private _creditCardInfo As String
	
	Private _inventoryID As String
	
	Private _stockName As String
	
	Private _orderDate As System.Nullable(Of Date)
	
	Private _workshopBranch As String
	
	Private _workshopAddress As String
	
	Private _orderStatus As String
	
	Private _paymentMethod As String
	
	Private _orderCost As System.Nullable(Of Decimal)
	
	Private _amountOrdered As System.Nullable(Of Integer)
	
	Private _Bill As EntityRef(Of Bill)
	
	Private _Customer As EntityRef(Of Customer)
	
	Private _ItemStorage As EntityRef(Of ItemStorage)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnorderIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnorderIDChanged()
    End Sub
    Partial Private Sub OncustomerNameChanging(value As String)
    End Sub
    Partial Private Sub OncustomerNameChanged()
    End Sub
    Partial Private Sub OncustomerPhoneNoChanging(value As String)
    End Sub
    Partial Private Sub OncustomerPhoneNoChanged()
    End Sub
    Partial Private Sub OncustomerICChanging(value As String)
    End Sub
    Partial Private Sub OncustomerICChanged()
    End Sub
    Partial Private Sub OnbillNoChanging(value As String)
    End Sub
    Partial Private Sub OnbillNoChanged()
    End Sub
    Partial Private Sub OncreditCardInfoChanging(value As String)
    End Sub
    Partial Private Sub OncreditCardInfoChanged()
    End Sub
    Partial Private Sub OninventoryIDChanging(value As String)
    End Sub
    Partial Private Sub OninventoryIDChanged()
    End Sub
    Partial Private Sub OnstockNameChanging(value As String)
    End Sub
    Partial Private Sub OnstockNameChanged()
    End Sub
    Partial Private Sub OnorderDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnorderDateChanged()
    End Sub
    Partial Private Sub OnworkshopBranchChanging(value As String)
    End Sub
    Partial Private Sub OnworkshopBranchChanged()
    End Sub
    Partial Private Sub OnworkshopAddressChanging(value As String)
    End Sub
    Partial Private Sub OnworkshopAddressChanged()
    End Sub
    Partial Private Sub OnorderStatusChanging(value As String)
    End Sub
    Partial Private Sub OnorderStatusChanged()
    End Sub
    Partial Private Sub OnpaymentMethodChanging(value As String)
    End Sub
    Partial Private Sub OnpaymentMethodChanged()
    End Sub
    Partial Private Sub OnorderCostChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnorderCostChanged()
    End Sub
    Partial Private Sub OnamountOrderedChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnamountOrderedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Bill = CType(Nothing, EntityRef(Of Bill))
		Me._Customer = CType(Nothing, EntityRef(Of Customer))
		Me._ItemStorage = CType(Nothing, EntityRef(Of ItemStorage))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_orderID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property orderID() As Integer
		Get
			Return Me._orderID
		End Get
		Set
			If ((Me._orderID = value)  _
						= false) Then
				Me.OnorderIDChanging(value)
				Me.SendPropertyChanging
				Me._orderID = value
				Me.SendPropertyChanged("orderID")
				Me.OnorderIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_customerName", DbType:="VarChar(30)")>  _
	Public Property customerName() As String
		Get
			Return Me._customerName
		End Get
		Set
			If (String.Equals(Me._customerName, value) = false) Then
				Me.OncustomerNameChanging(value)
				Me.SendPropertyChanging
				Me._customerName = value
				Me.SendPropertyChanged("customerName")
				Me.OncustomerNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_customerPhoneNo", DbType:="VarChar(20)")>  _
	Public Property customerPhoneNo() As String
		Get
			Return Me._customerPhoneNo
		End Get
		Set
			If (String.Equals(Me._customerPhoneNo, value) = false) Then
				Me.OncustomerPhoneNoChanging(value)
				Me.SendPropertyChanging
				Me._customerPhoneNo = value
				Me.SendPropertyChanged("customerPhoneNo")
				Me.OncustomerPhoneNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_customerIC", DbType:="VarChar(20)")>  _
	Public Property customerIC() As String
		Get
			Return Me._customerIC
		End Get
		Set
			If (String.Equals(Me._customerIC, value) = false) Then
				If Me._Customer.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OncustomerICChanging(value)
				Me.SendPropertyChanging
				Me._customerIC = value
				Me.SendPropertyChanged("customerIC")
				Me.OncustomerICChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_billNo", DbType:="VarChar(20)")>  _
	Public Property billNo() As String
		Get
			Return Me._billNo
		End Get
		Set
			If (String.Equals(Me._billNo, value) = false) Then
				If Me._Bill.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnbillNoChanging(value)
				Me.SendPropertyChanging
				Me._billNo = value
				Me.SendPropertyChanged("billNo")
				Me.OnbillNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_creditCardInfo", DbType:="VarChar(20)")>  _
	Public Property creditCardInfo() As String
		Get
			Return Me._creditCardInfo
		End Get
		Set
			If (String.Equals(Me._creditCardInfo, value) = false) Then
				Me.OncreditCardInfoChanging(value)
				Me.SendPropertyChanging
				Me._creditCardInfo = value
				Me.SendPropertyChanged("creditCardInfo")
				Me.OncreditCardInfoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_inventoryID", DbType:="VarChar(20)")>  _
	Public Property inventoryID() As String
		Get
			Return Me._inventoryID
		End Get
		Set
			If (String.Equals(Me._inventoryID, value) = false) Then
				If Me._ItemStorage.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OninventoryIDChanging(value)
				Me.SendPropertyChanging
				Me._inventoryID = value
				Me.SendPropertyChanged("inventoryID")
				Me.OninventoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_stockName", DbType:="VarChar(40)")>  _
	Public Property stockName() As String
		Get
			Return Me._stockName
		End Get
		Set
			If (String.Equals(Me._stockName, value) = false) Then
				Me.OnstockNameChanging(value)
				Me.SendPropertyChanging
				Me._stockName = value
				Me.SendPropertyChanged("stockName")
				Me.OnstockNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_orderDate", DbType:="Date")>  _
	Public Property orderDate() As System.Nullable(Of Date)
		Get
			Return Me._orderDate
		End Get
		Set
			If (Me._orderDate.Equals(value) = false) Then
				Me.OnorderDateChanging(value)
				Me.SendPropertyChanging
				Me._orderDate = value
				Me.SendPropertyChanged("orderDate")
				Me.OnorderDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_workshopBranch", DbType:="VarChar(50)")>  _
	Public Property workshopBranch() As String
		Get
			Return Me._workshopBranch
		End Get
		Set
			If (String.Equals(Me._workshopBranch, value) = false) Then
				Me.OnworkshopBranchChanging(value)
				Me.SendPropertyChanging
				Me._workshopBranch = value
				Me.SendPropertyChanged("workshopBranch")
				Me.OnworkshopBranchChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_workshopAddress", DbType:="VarChar(50)")>  _
	Public Property workshopAddress() As String
		Get
			Return Me._workshopAddress
		End Get
		Set
			If (String.Equals(Me._workshopAddress, value) = false) Then
				Me.OnworkshopAddressChanging(value)
				Me.SendPropertyChanging
				Me._workshopAddress = value
				Me.SendPropertyChanged("workshopAddress")
				Me.OnworkshopAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_orderStatus", DbType:="VarChar(20)")>  _
	Public Property orderStatus() As String
		Get
			Return Me._orderStatus
		End Get
		Set
			If (String.Equals(Me._orderStatus, value) = false) Then
				Me.OnorderStatusChanging(value)
				Me.SendPropertyChanging
				Me._orderStatus = value
				Me.SendPropertyChanged("orderStatus")
				Me.OnorderStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentMethod", DbType:="VarChar(20)")>  _
	Public Property paymentMethod() As String
		Get
			Return Me._paymentMethod
		End Get
		Set
			If (String.Equals(Me._paymentMethod, value) = false) Then
				Me.OnpaymentMethodChanging(value)
				Me.SendPropertyChanging
				Me._paymentMethod = value
				Me.SendPropertyChanged("paymentMethod")
				Me.OnpaymentMethodChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_orderCost", DbType:="SmallMoney")>  _
	Public Property orderCost() As System.Nullable(Of Decimal)
		Get
			Return Me._orderCost
		End Get
		Set
			If (Me._orderCost.Equals(value) = false) Then
				Me.OnorderCostChanging(value)
				Me.SendPropertyChanging
				Me._orderCost = value
				Me.SendPropertyChanged("orderCost")
				Me.OnorderCostChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_amountOrdered", DbType:="Int")>  _
	Public Property amountOrdered() As System.Nullable(Of Integer)
		Get
			Return Me._amountOrdered
		End Get
		Set
			If (Me._amountOrdered.Equals(value) = false) Then
				Me.OnamountOrderedChanging(value)
				Me.SendPropertyChanging
				Me._amountOrdered = value
				Me.SendPropertyChanged("amountOrdered")
				Me.OnamountOrderedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Bill_OnlineOrder", Storage:="_Bill", ThisKey:="billNo", OtherKey:="billNo", IsForeignKey:=true)>  _
	Public Property Bill() As Bill
		Get
			Return Me._Bill.Entity
		End Get
		Set
			Dim previousValue As Bill = Me._Bill.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Bill.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Bill.Entity = Nothing
					previousValue.OnlineOrders.Remove(Me)
				End If
				Me._Bill.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.OnlineOrders.Add(Me)
					Me._billNo = value.billNo
				Else
					Me._billNo = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Bill")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Customer_OnlineOrder", Storage:="_Customer", ThisKey:="customerIC", OtherKey:="customerIC", IsForeignKey:=true)>  _
	Public Property Customer() As Customer
		Get
			Return Me._Customer.Entity
		End Get
		Set
			Dim previousValue As Customer = Me._Customer.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Customer.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Customer.Entity = Nothing
					previousValue.OnlineOrders.Remove(Me)
				End If
				Me._Customer.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.OnlineOrders.Add(Me)
					Me._customerIC = value.customerIC
				Else
					Me._customerIC = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Customer")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ItemStorage_OnlineOrder", Storage:="_ItemStorage", ThisKey:="inventoryID", OtherKey:="inventoryID", IsForeignKey:=true)>  _
	Public Property ItemStorage() As ItemStorage
		Get
			Return Me._ItemStorage.Entity
		End Get
		Set
			Dim previousValue As ItemStorage = Me._ItemStorage.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ItemStorage.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ItemStorage.Entity = Nothing
					previousValue.OnlineOrders.Remove(Me)
				End If
				Me._ItemStorage.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.OnlineOrders.Add(Me)
					Me._inventoryID = value.inventoryID
				Else
					Me._inventoryID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ItemStorage")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Workshop")>  _
Partial Public Class Workshop
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _workshopID As String
	
	Private _workshopRegistrationNo As String
	
	Private _workshopEmail As String
	
	Private _workshopState As String
	
	Private _workshopAddress As String
	
	Private _workshopContact As String
	
	Private _workshopOD As System.Nullable(Of Date)
	
	Private _workshopStatus As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnworkshopIDChanging(value As String)
    End Sub
    Partial Private Sub OnworkshopIDChanged()
    End Sub
    Partial Private Sub OnworkshopRegistrationNoChanging(value As String)
    End Sub
    Partial Private Sub OnworkshopRegistrationNoChanged()
    End Sub
    Partial Private Sub OnworkshopEmailChanging(value As String)
    End Sub
    Partial Private Sub OnworkshopEmailChanged()
    End Sub
    Partial Private Sub OnworkshopStateChanging(value As String)
    End Sub
    Partial Private Sub OnworkshopStateChanged()
    End Sub
    Partial Private Sub OnworkshopAddressChanging(value As String)
    End Sub
    Partial Private Sub OnworkshopAddressChanged()
    End Sub
    Partial Private Sub OnworkshopContactChanging(value As String)
    End Sub
    Partial Private Sub OnworkshopContactChanged()
    End Sub
    Partial Private Sub OnworkshopODChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnworkshopODChanged()
    End Sub
    Partial Private Sub OnworkshopStatusChanging(value As String)
    End Sub
    Partial Private Sub OnworkshopStatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_workshopID", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property workshopID() As String
		Get
			Return Me._workshopID
		End Get
		Set
			If (String.Equals(Me._workshopID, value) = false) Then
				Me.OnworkshopIDChanging(value)
				Me.SendPropertyChanging
				Me._workshopID = value
				Me.SendPropertyChanged("workshopID")
				Me.OnworkshopIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_workshopRegistrationNo", DbType:="VarChar(20)")>  _
	Public Property workshopRegistrationNo() As String
		Get
			Return Me._workshopRegistrationNo
		End Get
		Set
			If (String.Equals(Me._workshopRegistrationNo, value) = false) Then
				Me.OnworkshopRegistrationNoChanging(value)
				Me.SendPropertyChanging
				Me._workshopRegistrationNo = value
				Me.SendPropertyChanged("workshopRegistrationNo")
				Me.OnworkshopRegistrationNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_workshopEmail", DbType:="VarChar(30)")>  _
	Public Property workshopEmail() As String
		Get
			Return Me._workshopEmail
		End Get
		Set
			If (String.Equals(Me._workshopEmail, value) = false) Then
				Me.OnworkshopEmailChanging(value)
				Me.SendPropertyChanging
				Me._workshopEmail = value
				Me.SendPropertyChanged("workshopEmail")
				Me.OnworkshopEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_workshopState", DbType:="VarChar(30)")>  _
	Public Property workshopState() As String
		Get
			Return Me._workshopState
		End Get
		Set
			If (String.Equals(Me._workshopState, value) = false) Then
				Me.OnworkshopStateChanging(value)
				Me.SendPropertyChanging
				Me._workshopState = value
				Me.SendPropertyChanged("workshopState")
				Me.OnworkshopStateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_workshopAddress", DbType:="VarChar(50)")>  _
	Public Property workshopAddress() As String
		Get
			Return Me._workshopAddress
		End Get
		Set
			If (String.Equals(Me._workshopAddress, value) = false) Then
				Me.OnworkshopAddressChanging(value)
				Me.SendPropertyChanging
				Me._workshopAddress = value
				Me.SendPropertyChanged("workshopAddress")
				Me.OnworkshopAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_workshopContact", DbType:="VarChar(12)")>  _
	Public Property workshopContact() As String
		Get
			Return Me._workshopContact
		End Get
		Set
			If (String.Equals(Me._workshopContact, value) = false) Then
				Me.OnworkshopContactChanging(value)
				Me.SendPropertyChanging
				Me._workshopContact = value
				Me.SendPropertyChanged("workshopContact")
				Me.OnworkshopContactChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_workshopOD", DbType:="Date")>  _
	Public Property workshopOD() As System.Nullable(Of Date)
		Get
			Return Me._workshopOD
		End Get
		Set
			If (Me._workshopOD.Equals(value) = false) Then
				Me.OnworkshopODChanging(value)
				Me.SendPropertyChanging
				Me._workshopOD = value
				Me.SendPropertyChanged("workshopOD")
				Me.OnworkshopODChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_workshopStatus", DbType:="VarChar(15)")>  _
	Public Property workshopStatus() As String
		Get
			Return Me._workshopStatus
		End Get
		Set
			If (String.Equals(Me._workshopStatus, value) = false) Then
				Me.OnworkshopStatusChanging(value)
				Me.SendPropertyChanging
				Me._workshopStatus = value
				Me.SendPropertyChanged("workshopStatus")
				Me.OnworkshopStatusChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.JobSheet")>  _
Partial Public Class JobSheet
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _jobSheetNo As String
	
	Private _jobSheetDate As Date
	
	Private _jobSheetType As String
	
	Private _staffIC As String
	
	Private _carRegisterNo As String
	
	Private _mileage As Integer
	
	Private _problem As String
	
	Private _timeIn As System.Nullable(Of System.TimeSpan)
	
	Private _timeOut As System.Nullable(Of System.TimeSpan)
	
	Private _billNo As String
	
	Private _nextMileage As System.Nullable(Of Integer)
	
	Private _Bill As EntityRef(Of Bill)
	
	Private _Car As EntityRef(Of Car)
	
	Private _Staff As EntityRef(Of Staff)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnjobSheetNoChanging(value As String)
    End Sub
    Partial Private Sub OnjobSheetNoChanged()
    End Sub
    Partial Private Sub OnjobSheetDateChanging(value As Date)
    End Sub
    Partial Private Sub OnjobSheetDateChanged()
    End Sub
    Partial Private Sub OnjobSheetTypeChanging(value As String)
    End Sub
    Partial Private Sub OnjobSheetTypeChanged()
    End Sub
    Partial Private Sub OnstaffICChanging(value As String)
    End Sub
    Partial Private Sub OnstaffICChanged()
    End Sub
    Partial Private Sub OncarRegisterNoChanging(value As String)
    End Sub
    Partial Private Sub OncarRegisterNoChanged()
    End Sub
    Partial Private Sub OnmileageChanging(value As Integer)
    End Sub
    Partial Private Sub OnmileageChanged()
    End Sub
    Partial Private Sub OnproblemChanging(value As String)
    End Sub
    Partial Private Sub OnproblemChanged()
    End Sub
    Partial Private Sub OntimeInChanging(value As System.Nullable(Of System.TimeSpan))
    End Sub
    Partial Private Sub OntimeInChanged()
    End Sub
    Partial Private Sub OntimeOutChanging(value As System.Nullable(Of System.TimeSpan))
    End Sub
    Partial Private Sub OntimeOutChanged()
    End Sub
    Partial Private Sub OnbillNoChanging(value As String)
    End Sub
    Partial Private Sub OnbillNoChanged()
    End Sub
    Partial Private Sub OnnextMileageChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnnextMileageChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Bill = CType(Nothing, EntityRef(Of Bill))
		Me._Car = CType(Nothing, EntityRef(Of Car))
		Me._Staff = CType(Nothing, EntityRef(Of Staff))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_jobSheetNo", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property jobSheetNo() As String
		Get
			Return Me._jobSheetNo
		End Get
		Set
			If (String.Equals(Me._jobSheetNo, value) = false) Then
				Me.OnjobSheetNoChanging(value)
				Me.SendPropertyChanging
				Me._jobSheetNo = value
				Me.SendPropertyChanged("jobSheetNo")
				Me.OnjobSheetNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_jobSheetDate", DbType:="Date NOT NULL")>  _
	Public Property jobSheetDate() As Date
		Get
			Return Me._jobSheetDate
		End Get
		Set
			If ((Me._jobSheetDate = value)  _
						= false) Then
				Me.OnjobSheetDateChanging(value)
				Me.SendPropertyChanging
				Me._jobSheetDate = value
				Me.SendPropertyChanged("jobSheetDate")
				Me.OnjobSheetDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_jobSheetType", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property jobSheetType() As String
		Get
			Return Me._jobSheetType
		End Get
		Set
			If (String.Equals(Me._jobSheetType, value) = false) Then
				Me.OnjobSheetTypeChanging(value)
				Me.SendPropertyChanging
				Me._jobSheetType = value
				Me.SendPropertyChanged("jobSheetType")
				Me.OnjobSheetTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_staffIC", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property staffIC() As String
		Get
			Return Me._staffIC
		End Get
		Set
			If (String.Equals(Me._staffIC, value) = false) Then
				If Me._Staff.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnstaffICChanging(value)
				Me.SendPropertyChanging
				Me._staffIC = value
				Me.SendPropertyChanged("staffIC")
				Me.OnstaffICChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_carRegisterNo", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property carRegisterNo() As String
		Get
			Return Me._carRegisterNo
		End Get
		Set
			If (String.Equals(Me._carRegisterNo, value) = false) Then
				If Me._Car.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OncarRegisterNoChanging(value)
				Me.SendPropertyChanging
				Me._carRegisterNo = value
				Me.SendPropertyChanged("carRegisterNo")
				Me.OncarRegisterNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mileage", DbType:="Int NOT NULL")>  _
	Public Property mileage() As Integer
		Get
			Return Me._mileage
		End Get
		Set
			If ((Me._mileage = value)  _
						= false) Then
				Me.OnmileageChanging(value)
				Me.SendPropertyChanging
				Me._mileage = value
				Me.SendPropertyChanged("mileage")
				Me.OnmileageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_problem", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property problem() As String
		Get
			Return Me._problem
		End Get
		Set
			If (String.Equals(Me._problem, value) = false) Then
				Me.OnproblemChanging(value)
				Me.SendPropertyChanging
				Me._problem = value
				Me.SendPropertyChanged("problem")
				Me.OnproblemChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_timeIn", DbType:="Time")>  _
	Public Property timeIn() As System.Nullable(Of System.TimeSpan)
		Get
			Return Me._timeIn
		End Get
		Set
			If (Me._timeIn.Equals(value) = false) Then
				Me.OntimeInChanging(value)
				Me.SendPropertyChanging
				Me._timeIn = value
				Me.SendPropertyChanged("timeIn")
				Me.OntimeInChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_timeOut", DbType:="Time")>  _
	Public Property timeOut() As System.Nullable(Of System.TimeSpan)
		Get
			Return Me._timeOut
		End Get
		Set
			If (Me._timeOut.Equals(value) = false) Then
				Me.OntimeOutChanging(value)
				Me.SendPropertyChanging
				Me._timeOut = value
				Me.SendPropertyChanged("timeOut")
				Me.OntimeOutChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_billNo", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property billNo() As String
		Get
			Return Me._billNo
		End Get
		Set
			If (String.Equals(Me._billNo, value) = false) Then
				If Me._Bill.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnbillNoChanging(value)
				Me.SendPropertyChanging
				Me._billNo = value
				Me.SendPropertyChanged("billNo")
				Me.OnbillNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nextMileage", DbType:="Int")>  _
	Public Property nextMileage() As System.Nullable(Of Integer)
		Get
			Return Me._nextMileage
		End Get
		Set
			If (Me._nextMileage.Equals(value) = false) Then
				Me.OnnextMileageChanging(value)
				Me.SendPropertyChanging
				Me._nextMileage = value
				Me.SendPropertyChanged("nextMileage")
				Me.OnnextMileageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Bill_JobSheet", Storage:="_Bill", ThisKey:="billNo", OtherKey:="billNo", IsForeignKey:=true)>  _
	Public Property Bill() As Bill
		Get
			Return Me._Bill.Entity
		End Get
		Set
			Dim previousValue As Bill = Me._Bill.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Bill.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Bill.Entity = Nothing
					previousValue.JobSheets.Remove(Me)
				End If
				Me._Bill.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.JobSheets.Add(Me)
					Me._billNo = value.billNo
				Else
					Me._billNo = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Bill")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Car_JobSheet", Storage:="_Car", ThisKey:="carRegisterNo", OtherKey:="carRegisterNo", IsForeignKey:=true)>  _
	Public Property Car() As Car
		Get
			Return Me._Car.Entity
		End Get
		Set
			Dim previousValue As Car = Me._Car.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Car.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Car.Entity = Nothing
					previousValue.JobSheets.Remove(Me)
				End If
				Me._Car.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.JobSheets.Add(Me)
					Me._carRegisterNo = value.carRegisterNo
				Else
					Me._carRegisterNo = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Car")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Staff_JobSheet", Storage:="_Staff", ThisKey:="staffIC", OtherKey:="staffIC", IsForeignKey:=true)>  _
	Public Property Staff() As Staff
		Get
			Return Me._Staff.Entity
		End Get
		Set
			Dim previousValue As Staff = Me._Staff.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Staff.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Staff.Entity = Nothing
					previousValue.JobSheets.Remove(Me)
				End If
				Me._Staff.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.JobSheets.Add(Me)
					Me._staffIC = value.staffIC
				Else
					Me._staffIC = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Staff")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
